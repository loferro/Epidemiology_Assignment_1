par(mfrow = c(1, 4))
plot(variogramma, main = "Exponential", lwd = 2, pch = 16, envelope = env)
plot(variogramma, main = "Gaussian", lwd = 2, pch = 16, envelope = env)
plot(variogramma, main = "Spherical", lwd = 2, pch = 16, envelope = env)
plot(variogramma, main = "Matern", lwd = 2, pch = 16, envelope = env)
data.frame( model = c("exponential",
"gaussian",
"spherical",
"matern"),
sum.of.squares = c(summary(wls.exponential)$sum.of.squares,
summary(wls.gaussian)$sum.of.squares,
summary(wls.spherical)$sum.of.squares,
summary(wls.matern)$sum.of.squares)
)
lk.exponential <- likfit(geodataset.residuals, cov.model = "exponential", ini = c(sill, range), lik.method = "ML")
lk.gaussian <- likfit(geodataset.residuals, cov.model = "gaussian", ini = c(86, 8),lik.method = "ML")
# lk.spherical <- likfit(geodataset.residuals, cov.model = "spherical", ini = c(sill, range), fix.nugget = F, nugget = range, lik.method = "ML", trend = "1st")
lk.spherical <- likfit(geodataset.residuals, cov.model = "spherical", ini = c(sill, range), lik.method = "ML")
lk.exponential
lk.gaussian
lk.spherical
lk.matern <- likfit(geodataset.residuals, cov.model = "matern", ini = c(86, 11), fix.nugget = F, nugget = range, fix.kappa = FALSE, kappa = 1, lik.method = "ML")
lk.matern
lk.matern <- likfit(geodataset.residuals, cov.model = "matern", ini = c(86, 11), lik.method = "ML")
lk.matern
plot(variogramma, main = "PARAMETRIC VARIOGRAMS", cex.main = 1, pch = 16) #empirical variogram
lines(lk.exponential, lwd = 2, col = "red", max.dist = dist.max.data) # add exponential
lines(lk.gaussian, lwd = 2, col = "blue", max.dist = dist.max.data) # add guassian
lines(lk.spherical, lwd = 2, col = "green3", max.dist = dist.max.data) # add spherical
lines(lk.matern, lwd = 2, col = "yellow", max.dist = dist.max.data) # add matern
legend(x = "bottomright", inset = 0.01, lty = c(1, 1), col = c("red",
"blue", "green3", "yellow"), legend = c("Exponetial", "Gaussian",
"Spherical", "Matern"), cex = 1)
env <- variog.model.env(geodataset.residuals, obj.variog = variogramma, model.pars = lk.exponential)
env <- variog.model.env(geodataset.residuals, obj.variog = variogramma, model.pars = lk.gaussian)
env <- variog.model.env(geodataset.residuals, obj.variog = variogramma, model.pars = lk.spherical)
env <- variog.model.env(geodataset.residuals, obj.variog = variogramma, model.pars = lk.matern)
par(mfrow = c(1, 4))
plot(variogramma, main = "Exponential", lwd = 2, pch = 16, envelope = env)
plot(variogramma, main = "Gaussian", lwd = 2, pch = 16, envelope = env, cex.main = 1)
plot(variogramma, main = "Spherical", lwd = 2, pch = 16, envelope = env, cex.main = 1)
plot(variogramma,main = "Matern", lwd = 2, pch = 16, envelope = env, cex.main = 1)
data.frame( model = c("exponential",
"gaussian",
"spherical",
"matern"),
loglikelihood = c(lk.exponential$loglik,
lk.gaussian$loglik,
lk.spherical$loglik,
lk.matern$loglik
)
)
rnx <- range(geodataset$coords[,1]) #Minimum and aximum of the latitude
rny <- range(geodataset$coords[,2]) #Minimum and Maximum of the longitude
newx.grid <- seq(rnx[1],rnx[2],l=51) #Create a sequence from minimum to
#maximum of the latitude of 51 points
newy.grid <- seq(rny[1],rny[2],l=51) #Create a sequence from minimum to
#maximum of the longitude of 51 points
dsgr.grid <- expand.grid(newx=newx.grid, newy=newy.grid) #expand, to create a grid
points(geodataset, ylim=range(poly84$y))
lines(poly84[,1:2], type="l")
points(dsgr.grid, pch = 19, col = 4, cex = 0.25)
kc.gaussian<-krige.conv(geodataset,locations= dsgr.grid,
krige =krige.control(type.krige="OK",obj.m = lk.gaussian,
trend.l="1st" ,trend.d= "1st"))
image(kc.gaussian,xlim=range(dataset$x),ylim=range(dataset$y))
contour(kc.gaussian,filled= TRUE,
coords.data=geodataset$coords,col=terrain.colors(31),xlim=range(dataset$x),ylim=range(dataset$y))
contour(kc.gaussian,filled= TRUE,val=sqrt(kc.gaussian$krige.var),
coords.data=geodataset$coords,xlim=range(dataset$x),ylim=range(dataset$y),
col = gray(seq(1, 0.1, l = 30)), main="Plot of Standard Deviation")
xv.gaussian <- xvalid(geodataset, model =lk.gaussian, reestimate = F)
names(xv.gaussian)
VC1.gaussian <- abs(mean(xv.gaussian$error/sqrt(xv.gaussian$krige.var)))
VC2.gaussian <- sqrt(mean((xv.gaussian$error/sqrt(xv.gaussian$krige.var))^2))
VC3.gaussian <- sqrt(mean(xv.gaussian$error^2))
data.frame( index = c("VC1", "VC2", "VC3"), value = c(VC1.gaussian, VC2.gaussian, VC3.gaussian) )
kc.spherical<-krige.conv(geodataset,locations= dsgr.grid,
krige =krige.control(type.krige="OK",obj.m = lk.spherical,
trend.l="1st" ,trend.d= "1st"))
image(kc.spherical, xlim=range(dataset$x),ylim=range(dataset$y))
contour(kc.spherical,filled= TRUE,
coords.data=geodataset$coords,xlim=range(dataset$x),ylim=range(dataset$y),
col=terrain.colors(30))
contour(kc.spherical,filled= TRUE,val=sqrt(kc.spherical$krige.var),
coords.data=geodataset$coords,xlim=range(dataset$x),ylim=range(dataset$y),
col = gray(seq(1, 0.1, l = 30)))
xv.spherical <- xvalid(geodataset, model =lk.spherical, reestimate = F)
VC1.spherical <- abs(mean(xv.spherical$error/sqrt(xv.spherical$krige.var)))
VC2.spherical <- sqrt(mean((xv.spherical$error/sqrt(xv.spherical$krige.var))^2))
VC3.spherical <- sqrt(mean(xv.spherical$error^2))
data.frame( index = c("VC1", "VC2", "VC3"), value = c(VC1.spherical, VC2.spherical, VC3.spherical) )
kc.exponential<-krige.conv(geodataset,locations= dsgr.grid,
krige =krige.control(type.krige="OK",obj.m = lk.exponential,
trend.l="1st" ,trend.d= "1st"))
image(kc.exponential, xlim=range(dataset$x),ylim=range(dataset$y))
contour(kc.exponential,filled= TRUE,
coords.data=geodataset$coords,xlim=range(dataset$x),ylim=range(dataset$y),
col=terrain.colors(30))
contour(kc.exponential,filled= TRUE,val=sqrt(kc.exponential$krige.var),
coords.data=geodataset$coords,xlim=range(dataset$x),ylim=range(dataset$y),
col = gray(seq(1, 0.1, l = 30)))
xv.exponential <- xvalid(geodataset, model =lk.exponential, reestimate = F)
VC1.exponential <- abs(mean(xv.exponential$error/sqrt(xv.exponential$krige.var)))
VC2.exponential <- sqrt(mean((xv.exponential$error/sqrt(xv.exponential$krige.var))^2))
VC3.exponential <- sqrt(mean(xv.exponential$error^2))
data.frame( index = c("VC1", "VC2", "VC3"), value = c(VC1.exponential, VC2.exponential, VC3.exponential) )
kc.matern<-krige.conv(geodataset,locations= dsgr.grid,
krige =krige.control(type.krige="OK",obj.m = lk.matern,
trend.l="1st" ,trend.d= "1st"))
image(kc.matern, xlim=range(dataset$x),ylim=range(dataset$y))
contour(kc.matern,filled= TRUE,
coords.data=geodataset$coords,xlim=range(dataset$x),ylim=range(dataset$y),
col=terrain.colors(30))
contour(kc.matern,filled= TRUE,val=sqrt(kc.matern$krige.var),
coords.data=geodataset$coords,xlim=range(dataset$x),ylim=range(dataset$y),
col = gray(seq(1, 0.1, l = 30)))
xv.matern <- xvalid(geodataset, model =lk.matern, reestimate = F)
VC1.matern <- abs(mean(xv.matern$error/sqrt(xv.matern$krige.var)))
VC2.matern <- sqrt(mean((xv.matern$error/sqrt(xv.matern$krige.var))^2))
VC3.matern <- sqrt(mean(xv.matern$error^2))
data.frame( index = c("VC1", "VC2", "VC3"), value = c(VC1.matern, VC2.matern, VC3.matern) )
save.image(".RData")
lm <- lm(data ~ x + I(x^2) + I(x^3) + I(x^4) + I(y^2) + I(y^3) + I(y^4), data = dataset)
summary(lm)
lm <- lm(data ~ x + I(x^2) + I(x^3) + I(x^4) + I(y^2) + I(y^4), data = dataset)
summary(lm)
lm <- lm(data ~ x + I(x^2) + I(x^3) + I(x^4) + I(y^4), data = dataset)
summary(lm)
residuals <- round(residuals(lm), digits = 3)
dataset.new <- cbind(dataset, residuals)
head(dataset.new)
geodataset.residuals <- as.geodata(dataset.new, data.col = 4)
plot(geodataset.residuals)
lm <- lm(data ~ x + I(x^2) + I(x^3) + I(y^4), data = dataset)
summary(lm)
lm <- lm(data ~ I(x^2) + I(x^3) + I(y^4), data = dataset)
summary(lm)
residuals <- round(residuals(lm), digits = 3)
dataset.new <- cbind(dataset, residuals)
head(dataset.new)
geodataset.residuals <- as.geodata(dataset.new, data.col = 4)
plot(geodataset.residuals)
lm <- lm(data ~ x + I(x^2) + y + I(y^2), data = dataset)
summary(lm)
summary(lm)
lm <- lm(data ~ x + I(x^2) + I(y^2), data = dataset)
summary(lm)
geodataset <- as.geodata(dataset)
plot(geodataset)
lm <- lm(data ~ x + y + I(x^2) + I(y^2), data = dataset)
summary(lm)
lm <- lm(data ~ x + y + I(x^2) + I(y^2) + I(x^2) + I(y^3), data = dataset)
summary(lm)
lm <- lm(data ~ x + y + I(x^2) + I(y^2) + I(x^3) + I(y^3), data = dataset)
summary(lm)
lm <- lm(data ~ x + y + I(x^2) + I(x^2) + I(y^3), data = dataset)
summary(lm)
lm <- lm(data ~ x + I(x^2) + I(x^2) + I(y^3), data = dataset)
summary(lm)
residuals <- round(residuals(lm), digits = 3)
dataset.new <- cbind(dataset, residuals)
head(dataset.new)
geodataset.residuals <- as.geodata(dataset.new, data.col = 4)
plot(geodataset.residuals)
lm <- lm(data ~ x + y + I(x^2) + I(y^2), data = dataset)
summary(lm)
dist.max.data  <- 120
#i chose 120 since it's when the variance becomes much smaller
vario.cloud.classical <- variog(geodata = geodataset.residuals,option = "cloud", estimator.type = "classical", max.dist = dist.max.data)
plot(vario.cloud.classical, main = "CLOUD", cex.main = 1, cex.lab = 1)
vario.bc.classical <- variog(geodata = geodataset.residuals, option = "bin",bin.cloud = TRUE, pairs.min = 30, max.dist = dist.max.data,estimator.type = "classical")
plot(vario.bc.classical, bin.cloud = TRUE, cex.lab = 1, main = "\nBINNED BOXPLOTS",cex.main = 1)
round(vario.bc.classical$bins.lim, 2)
vario.bc.classical$ind.bin
vario.bc.classical$n
vario.b.classical <- variog(geodata = geodataset.residuals, option = "bin",pairs.min = 30, max.dist = dist.max.data/2, estimator.type = "classical",uvec = seq(1, dist.max.data/2, l = 13))
plot(vario.b.classical, main = "EMPIRICAL VARIOGRAM (Classical)\nBINNED",cex.main = 1, cex.lab = 1, cex = 1, pch = 16)
vario.b.robust <- variog(geodata = geodataset.residuals, option = "bin",pairs.min = 30, max.dist = dist.max.data/2, estimator.type = "modulus",uvec = seq(1, dist.max.data/2, l = 13))
plot(vario.b.robust, main = "EMPIRICAL VARIOGRAM (Robust)\nBINNED",cex.main = 1, cex.lab = 1, cex = 1, pch = 16)
vario.b.classical <- variog(geodata = geodataset.residuals, option = "bin",pairs.min = 30, max.dist = dist.max.data, estimator.type = "classical",uvec = seq(1, dist.max.data/2, l = 13))
plot(vario.b.classical, main = "EMPIRICAL VARIOGRAM (Classical)\nBINNED",cex.main = 1, cex.lab = 1, cex = 1, pch = 16)
vario.b.classical <- variog(geodata = geodataset.residuals, option = "bin",pairs.min = 30, max.dist = dist.max.data, estimator.type = "classical",uvec = seq(1, dist.max.data, l = 13))
plot(vario.b.classical, main = "EMPIRICAL VARIOGRAM (Classical)\nBINNED",cex.main = 1, cex.lab = 1, cex = 1, pch = 16)
vario.b.robust <- variog(geodata = geodataset.residuals, option = "bin",pairs.min = 30, max.dist = dist.max.data, estimator.type = "modulus",uvec = seq(1, dist.max.data, l = 13))
plot(vario.b.robust, main = "EMPIRICAL VARIOGRAM (Robust)\nBINNED",cex.main = 1, cex.lab = 1, cex = 1, pch = 16)
dist.max.data
vario.b.robust <- variog(geodata = geodataset.residuals, option = "bin",pairs.min = 30, max.dist = dist.max.data, estimator.type = "modulus",uvec = seq(1, dist.max.data, l = 13))
plot(vario.b.robust, main = "EMPIRICAL VARIOGRAM (Robust)\nBINNED",cex.main = 1, cex.lab = 1, cex = 1, pch = 16)
for( i in 1:100){
set.seed(i)#fix the seed
cat(i)
indep.env <- variog.mc.env(geodataset.residuals, obj.variog = vario.b.robust,nsim = 1000)
if(prod(vario.b.robust$v[-1]>indep.env$v.lower[-1]) ==1 && prod(vario.b.robust$v<indep.env$v.upper-2) ==1 )
break
}
i
set.seed(i) #fix the seed
indep.env <- variog.mc.env(geodataset.residuals, obj.variog = vario.b.robust,nsim = 1000)
plot(vario.b.robust, envelope = indep.env, main = "CONFIDENCE BANDS FOR INDEPENDENT MODEL",lwd = 2, pch = 16)
set.seed(1) #fix the seed
indep.env <- variog.mc.env(geodataset.residuals, obj.variog = vario.b.robust,nsim = 1000)
plot(vario.b.robust, envelope = indep.env, main = "CONFIDENCE BANDS FOR INDEPENDENT MODEL",lwd = 2, pch = 16)
set.seed(100) #fix the seed
indep.env <- variog.mc.env(geodataset.residuals, obj.variog = vario.b.robust,nsim = 1000)
plot(vario.b.robust, envelope = indep.env, main = "CONFIDENCE BANDS FOR INDEPENDENT MODEL",lwd = 2, pch = 16)
set.seed(1) #fix the seed
indep.env <- variog.mc.env(geodataset.residuals, obj.variog = vario.b.robust,nsim = 1000)
plot(vario.b.robust, envelope = indep.env, main = "CONFIDENCE BANDS FOR INDEPENDENT MODEL",lwd = 2, pch = 16)
variod <- variog4(geodata = geodataset.residuals, option = "bin",pairs.min = 30, max.dist = dist.max.data, estimator.type = "classical",uvec = seq(1, dist.max.data, l = 13))
plot(variod, lyt = 2, legend = FALSE)
#plot the directional variogram
legend(x = "bottomright", inset = 0.01, lty = c(1, 2, 3, 4),col = c("black", "red", "green", "blue"), legend = c("0º","45º", "90º", "135º"), cex = 0.5)
source("RoseDiagram.R")
NumCases = length(variod$`0`)
# crit.val~sill
# max.dist = massimo valore di dstanza
rose.diagram(data.var = geodataset.residuals$data, data.cds = geodataset.residuals$coord,
max.dist = 80, numcases = NumCases, numdirec = 4, poly.tnd = "cte",
crit.val = 120)
source("RoseDiagram.R")
NumCases = length(variod$`0`)
# crit.val~sill
# max.dist = massimo valore di dstanza
rose.diagram(data.var = geodataset.residuals$data, data.cds = geodataset.residuals$coord,
max.dist = dist.max.data, numcases = NumCases, numdirec = 4, poly.tnd = "cte",
crit.val = 120)
variod <- variog4(geodata = geodataset.residuals, option = "bin",pairs.min = 30, max.dist = dist.max.data, estimator.type = "classical",uvec = seq(1, dist.max.data, l = 13))
plot(variod, lyt = 2, legend = FALSE)
#plot the directional variogram
legend(x = "bottomright", inset = 0.01, lty = c(1, 2, 3, 4),col = c("black", "red", "green", "blue"), legend = c("0º","45º", "90º", "135º"), cex = 0.5)
variod <- variog4(geodata = geodataset.residuals, option = "bin",pairs.min = 30, max.dist = dist.max.data, estimator.type = "modulus",uvec = seq(1, dist.max.data, l = 13))
plot(variod, lyt = 2, legend = FALSE)
#plot the directional variogram
legend(x = "bottomright", inset = 0.01, lty = c(1, 2, 3, 4),col = c("black", "red", "green", "blue"), legend = c("0º","45º", "90º", "135º"), cex = 0.5)
par(mfrow = c(1, 3))# cloud variogram
vario.cloud.robust <- variog(geodata = geodataset.residuals, option = "cloud",estimator.type = "modulus", max.dist = dist.max.data)
plot(vario.cloud.robust, main = "CLOUD", cex.main = 1, cex.lab = 1)
vario.bc.robust <- variog(geodata = geodataset.residuals, option = "bin",bin.cloud = TRUE, pairs.min = 30, max.dist = dist.max.data,estimator.type = "modulus", uvec = seq(1, dist.max.data,l = 13))
plot(vario.bc.robust, bin.cloud = TRUE, cex.lab = 1, main = "\nBINNED BOXPLOTS",cex.main = 1)
vario.b.robust <- variog(geodata = geodataset.residuals, option = "bin",pairs.min = 30, max.dist = dist.max.data, estimator.type = "modulus",uvec = seq(1, dist.max.data, l = 13))
plot(vario.b.robust, main = "EMPIRICAL VARIOGRAMS (Robust)\nBINNED",cex.main = 1, cex.lab = 1, cex = 1, pch = 16)
variogramma <- variog(geodata = geodataset.residuals)
plot(variogramma)
variogramma <- variog(geodata = geodataset.residuals)
par(mfrow=c(1,2))
plot(variogramma)
plot(vario.b.robust)
# windows(); eyefit(variogramma, silent = FALSE)
sill=100
range=20
variogramma <- variog(geodata = geodataset.residuals, max.dist = 120)
par(mfrow=c(1,2))
plot(variogramma)
plot(vario.b.robust)
# windows(); eyefit(variogramma, silent = FALSE)
sill=100
range=20
# BHO USERò IL VARIO.B.ROBUST
variogramma = vario.b.robust
sill=100
range=20
windows(); eyefit(variogramma, silent = FALSE)
windows(); eyefit(variogramma, silent = FALSE)
wls.exponential <- variofit(variogramma, cov.model = "exponential", ini = c(91, 25), fix.nugget = F, nugget = range, weights = "cressie")
wls.gaussian <- variofit(variogramma, cov.model = "gaussian", ini = c(86, 8), fix.nugget = F, nugget = range, weights = "cressie")
wls.spherical <- variofit(variogramma, cov.model = "spherical", ini = c(84, 32), fix.nugget = F, nugget = range, weights = "cressie")
wls.matern <- variofit(variogramma, cov.model = "matern", ini = c(86, 11), fix.nugget = F, nugget = range, fix.kappa = FALSE, kappa = 0.5, weights = "cressie")
wls.exponential #To see the results
wls.gaussian
wls.spherical
wls.matern
plot(variogramma, main = "PARAMETRIC VARIOGRAMS", cex.main = 1,
pch = 16) #empirical variogram
lines(wls.exponential, lwd = 2, col = "red", max.dist = dist.max.data) # add exponential
lines(wls.gaussian, lwd = 2, col = "blue", max.dist = dist.max.data) # add guassian
lines(wls.spherical, lwd = 2, col = "green3", max.dist = dist.max.data) # add spherical
lines(wls.matern, lwd = 2, col = "yellow", max.dist = dist.max.data) # add matern
legend(x = "bottomright", inset = 0.01, lty = c(1, 1), col = c("red",
"blue", "green3", "yellow"), legend = c("Exponetial", "Gaussian",
"Spherical", "Matern"), cex = 1)
plot(variogramma, main = "PARAMETRIC VARIOGRAMS", cex.main = 1,
pch = 16) #empirical variogram
lines(wls.exponential, lwd = 2, col = "red", max.dist = dist.max.data) # add exponential
lines(wls.gaussian, lwd = 2, col = "blue", max.dist = dist.max.data) # add guassian
lines(wls.spherical, lwd = 2, col = "green3", max.dist = dist.max.data) # add spherical
lines(wls.matern, lwd = 2, col = "yellow", max.dist = dist.max.data) # add matern
legend(x = "bottomright", inset = 0.01, lty = c(1, 1), col = c("red",
"blue", "green3", "yellow"), legend = c("Exponetial", "Gaussian",
"Spherical", "Matern"), cex = 1)
plot(variogramma, main = "PARAMETRIC VARIOGRAMS", cex.main = 1, pch = 16) #empirical variogram
lines(wls.exponential, lwd = 2, col = "red", max.dist = dist.max.data) # add exponential
lines(wls.gaussian, lwd = 2, col = "blue", max.dist = dist.max.data) # add guassian
lines(wls.spherical, lwd = 2, col = "green3", max.dist = dist.max.data) # add spherical
lines(wls.matern, lwd = 2, col = "yellow", max.dist = dist.max.data) # add matern
legend(x = "bottomright", inset = 0.01, lty = c(1, 1), col = c("red", "blue", "green3", "yellow"),
legend = c("Exponetial", "Gaussian", "Spherical", "Matern"), cex = 1)
plot(variogramma, main = "PARAMETRIC VARIOGRAMS", cex.main = 1, pch = 16) #empirical variogram
lines(wls.exponential, lwd = 2, col = "red", max.dist = dist.max.data) # add exponential
plot(variogramma, main = "PARAMETRIC VARIOGRAMS", cex.main = 1, pch = 16) #empirical variogram
lines(wls.exponential, lwd = 2, col = "red", max.dist = dist.max.data) # add exponential
lines(wls.gaussian, lwd = 2, col = "blue", max.dist = dist.max.data) # add guassian
plot(variogramma, main = "PARAMETRIC VARIOGRAMS", cex.main = 1, pch = 16) #empirical variogram
lines(wls.exponential, lwd = 2, col = "red", max.dist = dist.max.data) # add exponential
lines(wls.gaussian, lwd = 2, col = "blue", max.dist = dist.max.data) # add guassian
lines(wls.spherical, lwd = 2, col = "green3", max.dist = dist.max.data) # add spherical
plot(variogramma, main = "PARAMETRIC VARIOGRAMS", cex.main = 1, pch = 16) #empirical variogram
lines(wls.exponential, lwd = 2, col = "red", max.dist = dist.max.data) # add exponential
lines(wls.gaussian, lwd = 2, col = "blue", max.dist = dist.max.data) # add guassian
lines(wls.spherical, lwd = 2, col = "green3", max.dist = dist.max.data) # add spherical
lines(wls.matern, lwd = 2, col = "yellow", max.dist = dist.max.data) # add matern
set.seed(10)
env <- variog.model.env(geodataset.residuals, obj.variog = variogramma, model.pars = wls.exponential, nsim = 999)
env <- variog.model.env(geodataset.residuals, obj.variog = variogramma, model.pars = wls.gaussian, nsim = 999)
env <- variog.model.env(geodataset.residuals, obj.variog = variogramma, model.pars = wls.spherical, nsim = 999)
env <- variog.model.env(geodataset.residuals, obj.variog = variogramma, model.pars = wls.matern, nsim = 999)
par(mfrow = c(1, 4))
plot(variogramma, main = "Exponential", lwd = 2, pch = 16, envelope = env)
plot(variogramma, main = "Gaussian", lwd = 2, pch = 16, envelope = env)
plot(variogramma, main = "Spherical", lwd = 2, pch = 16, envelope = env)
plot(variogramma, main = "Matern", lwd = 2, pch = 16, envelope = env)
data.frame( model = c("exponential",
"gaussian",
"spherical",
"matern"),
sum.of.squares = c(summary(wls.exponential)$sum.of.squares,
summary(wls.gaussian)$sum.of.squares,
summary(wls.spherical)$sum.of.squares,
summary(wls.matern)$sum.of.squares)
)
lk.exponential <- likfit(geodataset.residuals, cov.model = "exponential", ini = c(sill, range), lik.method = "ML")
lk.gaussian <- likfit(geodataset.residuals, cov.model = "gaussian", ini = c(86, 8),lik.method = "ML")
# lk.spherical <- likfit(geodataset.residuals, cov.model = "spherical", ini = c(sill, range), fix.nugget = F, nugget = range, lik.method = "ML", trend = "1st")
lk.spherical <- likfit(geodataset.residuals, cov.model = "spherical", ini = c(sill, range), lik.method = "ML")
lk.matern <- likfit(geodataset.residuals, cov.model = "matern", ini = c(86, 11), fix.nugget = F, nugget = range, fix.kappa = FALSE, kappa = 1, lik.method = "ML")
wls.exponential <- variofit(variogramma, cov.model = "exponential", ini = c(91, 25), fix.nugget = F, nugget = range, weights = "cressie")
wls.gaussian <- variofit(variogramma, cov.model = "gaussian", ini = c(86, 8), fix.nugget = F, nugget = range, weights = "cressie")
wls.spherical <- variofit(variogramma, cov.model = "spherical", ini = c(84, 32), fix.nugget = F, nugget = range, weights = "cressie")
wls.matern <- variofit(variogramma, cov.model = "matern", ini = c(86, 11), fix.nugget = F, nugget = range, fix.kappa = FALSE, kappa = 0.5, weights = "cressie")
knitr::opts_chunk$set( echo=F )
poly84 <- read.delim("poly84.txt")
names(poly84)= c("x", "y", "data")
head(poly84)
elevationsIslet <- read.delim("elevationsIslet.txt")
head(elevationsIslet)
library(geoR)
library(gstat)
# library(lattice)
library(sp)
dataset = elevationsIslet
data_for_bubble = dataset
coordinates(data_for_bubble) <- c('x','y')
bubble(data_for_bubble,'data',do.log=TRUE,key.space='bottom')
rm(data_for_bubble)
geodataset <- as.geodata(dataset)
plot(geodataset)
lm <- lm(data ~ x + y + I(x^2) + I(y^2), data = dataset)
summary(lm)
lm <- lm(data ~ x + I(x^2) + I(y^2), data = dataset)
summary(lm)
residuals <- round(residuals(lm), digits = 3)
dataset.new <- cbind(dataset, residuals)
head(dataset.new)
geodataset.residuals <- as.geodata(dataset.new, data.col = 4)
plot(geodataset.residuals)
vario.cloud.classical <- variog(geodata = geodataset.residuals, option = "cloud", estimator.type = "classical")
plot(vario.cloud.classical, main = "CLOUD", cex.main = 1, cex.lab = 1)
dist.max.data  <- 120
#i chose 120 since it's when the variance becomes much smaller
vario.cloud.classical <- variog(geodata = geodataset.residuals,option = "cloud", estimator.type = "classical", max.dist = dist.max.data)
plot(vario.cloud.classical, main = "CLOUD", cex.main = 1, cex.lab = 1)
vario.bc.classical <- variog(geodata = geodataset.residuals, option = "bin",bin.cloud = TRUE, pairs.min = 30, max.dist = dist.max.data,estimator.type = "classical")
plot(vario.bc.classical, bin.cloud = TRUE, cex.lab = 1, main = "\nBINNED BOXPLOTS",cex.main = 1)
# round(vario.bc.classical$bins.lim, 2)
vario.bc.classical$ind.bin
vario.bc.classical$n
vario.b.classical <- variog(geodata = geodataset.residuals, option = "bin",pairs.min = 30, max.dist = dist.max.data, estimator.type = "classical",uvec = seq(1, dist.max.data, l = 13))
plot(vario.b.classical, main = "EMPIRICAL VARIOGRAM (Classical)\nBINNED",cex.main = 1, cex.lab = 1, cex = 1, pch = 16)
vario.b.robust <- variog(geodata = geodataset.residuals, option = "bin",pairs.min = 30, max.dist = dist.max.data, estimator.type = "modulus",uvec = seq(1, dist.max.data, l = 13))
plot(vario.b.robust, main = "EMPIRICAL VARIOGRAM (Robust)\nBINNED",cex.main = 1, cex.lab = 1, cex = 1, pch = 16)
set.seed(1) #fix the seed
indep.env <- variog.mc.env(geodataset.residuals, obj.variog = vario.b.robust,nsim = 1000)
plot(vario.b.robust, envelope = indep.env, main = "CONFIDENCE BANDS FOR INDEPENDENT MODEL",lwd = 2, pch = 16)
variod <- variog4(geodata = geodataset.residuals, option = "bin",pairs.min = 30, max.dist = dist.max.data, estimator.type = "classical",uvec = seq(1, dist.max.data, l = 13))
plot(variod, lyt = 2, legend = FALSE)
#plot the directional variogram
legend(x = "bottomright", inset = 0.01, lty = c(1, 2, 3, 4),col = c("black", "red", "green", "blue"), legend = c("0º","45º", "90º", "135º"), cex = 0.5)
variod <- variog4(geodata = geodataset.residuals, option = "bin",pairs.min = 30, max.dist = dist.max.data, estimator.type = "modulus",uvec = seq(1, dist.max.data, l = 13))
plot(variod, lyt = 2, legend = FALSE)
#plot the directional variogram
legend(x = "bottomright", inset = 0.01, lty = c(1, 2, 3, 4),col = c("black", "red", "green", "blue"), legend = c("0º","45º", "90º", "135º"), cex = 0.5)
source("RoseDiagram.R")
NumCases = length(variod$`0`)
# crit.val~sill
# max.dist = massimo valore di dstanza
rose.diagram(data.var = geodataset.residuals$data, data.cds = geodataset.residuals$coord,
max.dist = dist.max.data, numcases = NumCases, numdirec = 4, poly.tnd = "cte",
crit.val = 120)
par(mfrow = c(1, 3))# cloud variogram
vario.cloud.robust <- variog(geodata = geodataset.residuals, option = "cloud",estimator.type = "modulus", max.dist = dist.max.data)
plot(vario.cloud.robust, main = "CLOUD", cex.main = 1, cex.lab = 1)
vario.bc.robust <- variog(geodata = geodataset.residuals, option = "bin",bin.cloud = TRUE, pairs.min = 30, max.dist = dist.max.data,estimator.type = "modulus", uvec = seq(1, dist.max.data,l = 13))
plot(vario.bc.robust, bin.cloud = TRUE, cex.lab = 1, main = "\nBINNED BOXPLOTS",cex.main = 1)
vario.b.robust <- variog(geodata = geodataset.residuals, option = "bin",pairs.min = 30, max.dist = dist.max.data, estimator.type = "modulus",uvec = seq(1, dist.max.data, l = 13))
plot(vario.b.robust, main = "EMPIRICAL VARIOGRAMS (Robust)\nBINNED",cex.main = 1, cex.lab = 1, cex = 1, pch = 16)
variogramma <- variog(geodata = geodataset.residuals, max.dist = 120)
par(mfrow=c(1,2))
plot(variogramma)
plot(vario.b.robust)
# BHO USERò IL VARIO.B.ROBUST
variogramma = vario.b.robust
# windows(); eyefit(variogramma, silent = FALSE)
wls.exponential <- variofit(variogramma, cov.model = "exponential", ini = c(91, 25), fix.nugget = F, nugget = range, weights = "cressie")
wls.gaussian <- variofit(variogramma, cov.model = "gaussian", ini = c(86, 8), fix.nugget = F, nugget = range, weights = "cressie")
wls.spherical <- variofit(variogramma, cov.model = "spherical", ini = c(84, 32), fix.nugget = F, nugget = range, weights = "cressie")
wls.matern <- variofit(variogramma, cov.model = "matern", ini = c(86, 11), fix.nugget = F, nugget = range, fix.kappa = FALSE, kappa = 0.5, weights = "cressie")
wls.exponential <- variofit(variogramma, cov.model = "exponential", ini = c(91, 25), fix.nugget = F, nugget = range, weights = "cressie")
wls.gaussian <- variofit(variogramma, cov.model = "gaussian", ini = c(86, 8), fix.nugget = F, nugget = range, weights = "cressie")
wls.spherical <- variofit(variogramma, cov.model = "spherical", ini = c(84, 32), fix.nugget = F, nugget = range, weights = "cressie")
wls.matern <- variofit(variogramma, cov.model = "matern", ini = c(86, 11), fix.nugget = F, nugget = range, fix.kappa = FALSE, kappa = 0.5, weights = "cressie")
wls.exponential <- variofit(variogramma, cov.model = "exponential", ini = c(91, 25), fix.nugget = F, nugget = range, weights = "cressie")
wls.gaussian <- variofit(variogramma, cov.model = "gaussian", ini = c(86, 8), fix.nugget = F, nugget = range, weights = "cressie")
wls.spherical <- variofit(variogramma, cov.model = "spherical", ini = c(84, 32), fix.nugget = F, nugget = range, weights = "cressie")
wls.matern <- variofit(variogramma, cov.model = "matern", ini = c(86, 11), fix.nugget = F, nugget = range, fix.kappa = FALSE, kappa = 0.5, weights = "cressie")
wls.exponential <- variofit(variogramma, cov.model = "exponential", ini = c(91, 25), fix.nugget = F, nugget = range, weights = "cressie")
wls.gaussian <- variofit(variogramma, cov.model = "gaussian", ini = c(86, 8), fix.nugget = F, nugget = range, weights = "cressie")
wls.spherical <- variofit(variogramma, cov.model = "spherical", ini = c(84, 32), fix.nugget = F, nugget = range, weights = "cressie")
wls.matern <- variofit(variogramma, cov.model = "matern", ini = c(86, 11), fix.nugget = F, nugget = range, fix.kappa = FALSE, kappa = 0.5, weights = "cressie")
knitr::opts_chunk$set( echo=F )
poly84 <- read.delim("poly84.txt")
names(poly84)= c("x", "y", "data")
head(poly84)
elevationsIslet <- read.delim("elevationsIslet.txt")
head(elevationsIslet)
library(geoR)
library(gstat)
# library(lattice)
library(sp)
dataset = elevationsIslet
data_for_bubble = dataset
coordinates(data_for_bubble) <- c('x','y')
bubble(data_for_bubble,'data',do.log=TRUE,key.space='bottom')
rm(data_for_bubble)
geodataset <- as.geodata(dataset)
plot(geodataset)
lm <- lm(data ~ x + y + I(x^2) + I(y^2), data = dataset)
summary(lm)
lm <- lm(data ~ x + I(x^2) + I(y^2), data = dataset)
summary(lm)
residuals <- round(residuals(lm), digits = 3)
dataset.new <- cbind(dataset, residuals)
head(dataset.new)
geodataset.residuals <- as.geodata(dataset.new, data.col = 4)
plot(geodataset.residuals)
vario.cloud.classical <- variog(geodata = geodataset.residuals, option = "cloud", estimator.type = "classical")
plot(vario.cloud.classical, main = "CLOUD", cex.main = 1, cex.lab = 1)
dist.max.data  <- 120
#i chose 120 since it's when the variance becomes much smaller
vario.cloud.classical <- variog(geodata = geodataset.residuals,option = "cloud", estimator.type = "classical", max.dist = dist.max.data)
plot(vario.cloud.classical, main = "CLOUD", cex.main = 1, cex.lab = 1)
vario.bc.classical <- variog(geodata = geodataset.residuals, option = "bin",bin.cloud = TRUE, pairs.min = 30, max.dist = dist.max.data,estimator.type = "classical")
plot(vario.bc.classical, bin.cloud = TRUE, cex.lab = 1, main = "\nBINNED BOXPLOTS",cex.main = 1)
# round(vario.bc.classical$bins.lim, 2)
vario.bc.classical$ind.bin
vario.bc.classical$n
vario.b.classical <- variog(geodata = geodataset.residuals, option = "bin",pairs.min = 30, max.dist = dist.max.data, estimator.type = "classical",uvec = seq(1, dist.max.data, l = 13))
plot(vario.b.classical, main = "EMPIRICAL VARIOGRAM (Classical)\nBINNED",cex.main = 1, cex.lab = 1, cex = 1, pch = 16)
vario.b.robust <- variog(geodata = geodataset.residuals, option = "bin",pairs.min = 30, max.dist = dist.max.data, estimator.type = "modulus",uvec = seq(1, dist.max.data, l = 13))
plot(vario.b.robust, main = "EMPIRICAL VARIOGRAM (Robust)\nBINNED",cex.main = 1, cex.lab = 1, cex = 1, pch = 16)
set.seed(1) #fix the seed
indep.env <- variog.mc.env(geodataset.residuals, obj.variog = vario.b.robust,nsim = 1000)
plot(vario.b.robust, envelope = indep.env, main = "CONFIDENCE BANDS FOR INDEPENDENT MODEL",lwd = 2, pch = 16)
variod <- variog4(geodata = geodataset.residuals, option = "bin",pairs.min = 30, max.dist = dist.max.data, estimator.type = "classical",uvec = seq(1, dist.max.data, l = 13))
plot(variod, lyt = 2, legend = FALSE)
#plot the directional variogram
legend(x = "bottomright", inset = 0.01, lty = c(1, 2, 3, 4),col = c("black", "red", "green", "blue"), legend = c("0º","45º", "90º", "135º"), cex = 0.5)
variod <- variog4(geodata = geodataset.residuals, option = "bin",pairs.min = 30, max.dist = dist.max.data, estimator.type = "modulus",uvec = seq(1, dist.max.data, l = 13))
plot(variod, lyt = 2, legend = FALSE)
#plot the directional variogram
legend(x = "bottomright", inset = 0.01, lty = c(1, 2, 3, 4),col = c("black", "red", "green", "blue"), legend = c("0º","45º", "90º", "135º"), cex = 0.5)
source("RoseDiagram.R")
NumCases = length(variod$`0`)
# crit.val~sill
# max.dist = massimo valore di dstanza
rose.diagram(data.var = geodataset.residuals$data, data.cds = geodataset.residuals$coord,
max.dist = dist.max.data, numcases = NumCases, numdirec = 4, poly.tnd = "cte",
crit.val = 120)
par(mfrow = c(1, 3))# cloud variogram
vario.cloud.robust <- variog(geodata = geodataset.residuals, option = "cloud",estimator.type = "modulus", max.dist = dist.max.data)
plot(vario.cloud.robust, main = "CLOUD", cex.main = 1, cex.lab = 1)
vario.bc.robust <- variog(geodata = geodataset.residuals, option = "bin",bin.cloud = TRUE, pairs.min = 30, max.dist = dist.max.data,estimator.type = "modulus", uvec = seq(1, dist.max.data,l = 13))
plot(vario.bc.robust, bin.cloud = TRUE, cex.lab = 1, main = "\nBINNED BOXPLOTS",cex.main = 1)
vario.b.robust <- variog(geodata = geodataset.residuals, option = "bin",pairs.min = 30, max.dist = dist.max.data, estimator.type = "modulus",uvec = seq(1, dist.max.data, l = 13))
plot(vario.b.robust, main = "EMPIRICAL VARIOGRAMS (Robust)\nBINNED",cex.main = 1, cex.lab = 1, cex = 1, pch = 16)
variogramma <- variog(geodata = geodataset.residuals, max.dist = 120)
par(mfrow=c(1,2))
plot(variogramma)
plot(vario.b.robust)
# BHO USERò IL VARIO.B.ROBUST
variogramma = vario.b.robust
# windows(); eyefit(variogramma, silent = FALSE)
wls.exponential <- variofit(variogramma, cov.model = "exponential", ini = c(91, 25), fix.nugget = F, nugget = range, weights = "cressie")
wls.exponential <- variofit(variogramma, cov.model = "exponential", ini = c(91, 25), fix.nugget = F, nugget = range, weights = "cressie")
windows(); eyefit(variogramma, silent = FALSE)
wls.exponential <- variofit(variogramma, cov.model = "exponential", ini = c(91, 25), fix.nugget = F, nugget = range, weights = "cressie")
wls.gaussian <- variofit(variogramma, cov.model = "gaussian", ini = c(86, 8), fix.nugget = F, nugget = range, weights = "cressie")
wls.spherical <- variofit(variogramma, cov.model = "spherical", ini = c(84, 32), fix.nugget = F, nugget = range, weights = "cressie")
expand.grid(seq(0,1,l=5), seq(0,1,l=5))
ini.vals = expand.grid(seq(0,1,l=5), seq(0,1,l=5))
wls.exponential <- variofit(variogramma, cov.model = "exponential", ini = ini.vals, fix.nugget = F, nugget = range, weights = "cressie")
wls.exponential <- variofit(variogramma, cov.model = "exponential", ini = ini.vals, fix.nugget = F, nugget = range)
wls.exponential <- variofit(variogramma, cov.model = "exponential", ini = c(91, 25), fix.nugget = F, nugget = range, weights = "cressie")
