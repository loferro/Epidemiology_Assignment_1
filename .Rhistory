windows(); eyefit(variogramma, silent = FALSE)
lk.exponential <- likfit(geodataset.residuals, cov.model = "exponential", ini = c(91, 25), lik.method = "REML")
lk.gaussian <- likfit(geodataset.residuals, cov.model = "gaussian", ini = c(86, 15), lik.method = "REML")
lk.exponential <- likfit(geodataset.residuals, cov.model = "exponential", ini = c(91, 25), lik.method = "REML")
lk.gaussian <- likfit(geodataset.residuals, cov.model = "gaussian", ini = c(86, 15), lik.method = "REML")
lk.spherical <- likfit(geodataset.residuals, cov.model = "spherical", ini = c(91, 22), lik.method = "REML")
lk.matern <- likfit(geodataset.residuals, cov.model = "matern", ini = c(88, 19), fix.nugget = F, fix.kappa = F, kappa = 0.14, lik.method = "REML")
windows(); eyefit(variogramma, silent = FALSE)
lk.gaussian <- likfit(geodataset.residuals, cov.model = "gaussian", ini = c(101, 11), lik.method = "REML")
lk.exponential
dist.max.data=dist.max.data*2
plot(variogramma, main = "PARAMETRIC VARIOGRAMS", cex.main = 1, pch = 16) #empirical variogram
lines(lk.exponential, lwd = 2, col = "red", max.dist = dist.max.data) # add exponential
lines(lk.gaussian, lwd = 2, col = "blue", max.dist = dist.max.data) # add guassian
lines(lk.spherical, lwd = 2, col = "green3", max.dist = dist.max.data) # add spherical
lines(lk.matern, lwd = 2, col = "yellow", max.dist = dist.max.data) # add matern
legend(x = "bottomright", inset = 0.01, lty = c(1, 1), col = c("red",
"blue", "green3", "yellow"), legend = c("Exponential", "Gaussian",
"Spherical", "Matern"), cex = 1)
env <- variog.model.env(geodataset.residuals, obj.variog = variogramma, model.pars = lk.exponential)
env <- variog.model.env(geodataset.residuals, obj.variog = variogramma, model.pars = lk.gaussian)
env <- variog.model.env(geodataset.residuals, obj.variog = variogramma, model.pars = lk.spherical)
env <- variog.model.env(geodataset.residuals, obj.variog = variogramma, model.pars = lk.matern)
dist.max.data=148
plot(variogramma, main = "PARAMETRIC VARIOGRAMS", cex.main = 1, pch = 16) #empirical variogram
lines(lk.exponential, lwd = 2, col = "red", max.dist = dist.max.data) # add exponential
lines(lk.gaussian, lwd = 2, col = "blue", max.dist = dist.max.data) # add guassian
lines(lk.spherical, lwd = 2, col = "green3", max.dist = dist.max.data) # add spherical
lines(lk.matern, lwd = 2, col = "yellow", max.dist = dist.max.data) # add matern
legend(x = "bottomright", inset = 0.01, lty = c(1, 1), col = c("red",
"blue", "green3", "yellow"), legend = c("Exponential", "Gaussian",
"Spherical", "Matern"), cex = 1)
dist.max.data=149
plot(variogramma, main = "PARAMETRIC VARIOGRAMS", cex.main = 1, pch = 16) #empirical variogram
lines(lk.exponential, lwd = 2, col = "red", max.dist = dist.max.data) # add exponential
lines(lk.gaussian, lwd = 2, col = "blue", max.dist = dist.max.data) # add guassian
lines(lk.spherical, lwd = 2, col = "green3", max.dist = dist.max.data) # add spherical
lines(lk.matern, lwd = 2, col = "yellow", max.dist = dist.max.data) # add matern
legend(x = "bottomright", inset = 0.01, lty = c(1, 1), col = c("red",
"blue", "green3", "yellow"), legend = c("Exponential", "Gaussian",
"Spherical", "Matern"), cex = 1)
env <- variog.model.env(geodataset.residuals, obj.variog = variogramma, model.pars = lk.exponential)
env <- variog.model.env(geodataset.residuals, obj.variog = variogramma, model.pars = lk.gaussian)
env <- variog.model.env(geodataset.residuals, obj.variog = variogramma, model.pars = lk.spherical)
env <- variog.model.env(geodataset.residuals, obj.variog = variogramma, model.pars = lk.matern)
par(mfrow = c(1, 4))
plot(variogramma, main = "Exponential", lwd = 2, pch = 16, envelope = env.exponential)
env.exponential <- variog.model.env(geodataset.residuals, obj.variog = variogramma, model.pars = lk.exponential)
env.gaussian <- variog.model.env(geodataset.residuals, obj.variog = variogramma, model.pars = lk.gaussian)
env.spherical <- variog.model.env(geodataset.residuals, obj.variog = variogramma, model.pars = lk.spherical)
env.matern <- variog.model.env(geodataset.residuals, obj.variog = variogramma, model.pars = lk.matern)
par(mfrow = c(1, 4))
plot(variogramma, main = "Exponential", lwd = 2, pch = 16, envelope = env.exponential)
plot(variogramma, main = "Gaussian", lwd = 2, pch = 16, envelope = env.gaussian, cex.main = 1)
plot(variogramma, main = "Spherical", lwd = 2, pch = 16, envelope = env.spherical, cex.main = 1)
plot(variogramma, main = "Matern", lwd = 2, pch = 16, envelope = env.matern, cex.main = 1)
temp.lk = data.frame( model = c("exponential",
"gaussian",
"spherical",
"matern"),
loglikelihood = c(lk.exponential$loglik,
lk.gaussian$loglik,
lk.spherical$loglik,
lk.matern$loglik
)
)
temp.lk[ order(temp.lk$loglikelihood, decreasing = T),]
rnx <- range(geodataset$coords[,1]) #Minimum and maximum of the latitude
rny <- range(geodataset$coords[,2]) #Minimum and maximum of the longitude
newx.grid <- seq(rnx[1],rnx[2],l=51) #Create a sequence from minimum to
#maximum of the latitude of 51 points
newy.grid <- seq(rny[1],rny[2],l=51) #Create a sequence from minimum to
#maximum of the longitude of 51 points
dsgr.grid <- expand.grid(newx=newx.grid, newy=newy.grid) #expand, to create a grid
points(geodataset, ylim=range(poly84$y))
lines(poly84[,1:2], type="l")
points(dsgr.grid, pch = 19, col = 4, cex = 0.25)
par(mfrow = c(1, 4))
plot(variogramma, main = "Exponential", lwd = 2, pch = 16, envelope = env.exponential)
plot(variogramma, main = "Gaussian", lwd = 2, pch = 16, envelope = env.gaussian, cex.main = 1)
plot(variogramma, main = "Spherical", lwd = 2, pch = 16, envelope = env.spherical, cex.main = 1)
plot(variogramma, main = "Matern", lwd = 2, pch = 16, envelope = env.matern, cex.main = 1)
temp.lk = data.frame( model = c("exponential",
"gaussian",
"spherical",
"matern"),
loglikelihood = c(lk.exponential$loglik,
lk.gaussian$loglik,
lk.spherical$loglik,
lk.matern$loglik
)
)
temp.lk[ order(temp.lk$loglikelihood, decreasing = T),]
rnx <- range(geodataset$coords[,1]) #Minimum and maximum of the latitude
rny <- range(geodataset$coords[,2]) #Minimum and maximum of the longitude
newx.grid <- seq(rnx[1],rnx[2],l=51) #Create a sequence from minimum to
#maximum of the latitude of 51 points
newy.grid <- seq(rny[1],rny[2],l=51) #Create a sequence from minimum to
#maximum of the longitude of 51 points
dsgr.grid <- expand.grid(newx=newx.grid, newy=newy.grid) #expand, to create a grid
points(geodataset, ylim=range(poly84$y))
lines(poly84[,1:2], type="l")
points(dsgr.grid, pch = 19, col = 4, cex = 0.25)
kc.gaussian<-krige.conv(geodataset,locations= dsgr.grid,
krige =krige.control(type.krige="OK",obj.m = lk.gaussian,
trend.l="1st" ,trend.d= "1st"))
image(kc.gaussian,xlim=range(dataset$x),ylim=range(dataset$y), borders = poly84)
contour(kc.gaussian,filled= TRUE,
coords.data=geodataset$coords,col=terrain.colors(31),xlim=range(dataset$x),ylim=range(dataset$y),borders = poly84)
contour(kc.gaussian,filled= TRUE,val=sqrt(kc.gaussian$krige.var),
coords.data=geodataset$coords,xlim=range(dataset$x),ylim=range(dataset$y),
col = gray(seq(1, 0.1, l = 30)), main="Plot of Standard Deviation",borders = poly84)
xv.gaussian <- xvalid(geodataset, model =lk.gaussian, reestimate = F)
names(xv.gaussian)
VC1.gaussian <- abs(mean(xv.gaussian$error/sqrt(xv.gaussian$krige.var)))
VC2.gaussian <- sqrt(mean((xv.gaussian$error/sqrt(xv.gaussian$krige.var))^2))
VC3.gaussian <- sqrt(mean(xv.gaussian$error^2))
data.frame( index = c("VC1", "VC2", "VC3"), value = c(VC1.gaussian, VC2.gaussian, VC3.gaussian) )
kc.matern<-krige.conv(geodataset,locations= dsgr.grid,
krige = krige.control(type.krige="OK",obj.m = lk.matern, trend.l="1st" ,trend.d= "1st"))
image(kc.matern, xlim=range(dataset$x),ylim=range(dataset$y), borders = poly84)
contour(kc.matern,filled= TRUE,
coords.data=geodataset$coords,xlim=range(dataset$x),ylim=range(dataset$y), col=terrain.colors(30), borders = poly84)
contour(kc.matern,filled= TRUE,val=sqrt(kc.matern$krige.var),
coords.data=geodataset$coords,xlim=range(dataset$x),ylim=range(dataset$y), col = gray(seq(1, 0.1, l = 30)), borders = poly84[,1:3])
xv.matern <- xvalid(geodataset, model =lk.matern, reestimate = F)
VC1.matern <- abs(mean(xv.matern$error/sqrt(xv.matern$krige.var)))
VC2.matern <- sqrt(mean((xv.matern$error/sqrt(xv.matern$krige.var))^2))
VC3.matern <- sqrt(mean(xv.matern$error^2))
data.frame( index = c("VC1", "VC2", "VC3"), value = c(VC1.matern, VC2.matern, VC3.matern) )
save.image("Data.RData")
kc.matern<-krige.conv(geodataset,locations= dsgr.grid,
krige = krige.control(type.krige="OK",obj.m = lk.matern))
image(kc.matern, xlim=range(dataset$x),ylim=range(dataset$y), borders = poly84)
kc.gaussian<-krige.conv(geodataset,locations= dsgr.grid,
krige =krige.control(type.krige="OK",obj.m = lk.gaussian)
image(kc.gaussian,xlim=range(dataset$x),ylim=range(dataset$y), borders = poly84)
kc.gaussian<-krige.conv(geodataset,locations= dsgr.grid,
krige =krige.control(type.krige="OK",obj.m = lk.gaussian))
image(kc.gaussian,xlim=range(dataset$x),ylim=range(dataset$y), borders = poly84)
image(kc.gaussian,xlim=range(poly84$x),ylim=range(poly84$y), borders = poly84)
contour(kc.gaussian,filled= TRUE,
coords.data=geodataset$coords,col=terrain.colors(31),xlim=range(poly84$x),ylim=range(poly84$y),borders = poly84)
contour(kc.gaussian,filled= TRUE,val=sqrt(kc.gaussian$krige.var),
coords.data=geodataset$coords,xlim=range(poly84$x),ylim=range(poly84$y),
col = gray(seq(1, 0.1, l = 30)), main="Plot of Standard Deviation",borders = poly84)
kc.gaussian<-krige.conv(geodataset,locations= dsgr.grid,
krige =krige.control(type.krige="SK",obj.m = lk.gaussian))
image(kc.gaussian,xlim=range(poly84$x),ylim=range(poly84$y), borders = poly84)
kc.gaussian<-krige.conv(geodataset,locations= dsgr.grid,
krige = krige.control(type.krige="OK",obj.m = lk.gaussian, trend.l="2nd" ,trend.d= "2nd"))
image(kc.gaussian,xlim=range(poly84$x),ylim=range(poly84$y), borders = poly84)
kc.gaussian<-krige.conv(geodataset,locations= dsgr.grid,
krige =krige.control(type.krige="OK",obj.m = lk.gaussian))
image(kc.gaussian,xlim=range(poly84$x),ylim=range(poly84$y), borders = poly84)
contour(kc.gaussian,filled= TRUE,
coords.data=geodataset$coords,col=terrain.colors(31),xlim=range(poly84$x),ylim=range(poly84$y),borders = poly84)
contour(kc.gaussian,filled= TRUE,val=sqrt(kc.gaussian$krige.var),
coords.data=geodataset$coords,xlim=range(poly84$x),ylim=range(poly84$y),
col = gray(seq(1, 0.1, l = 30)), main="Plot of Standard Deviation",borders = poly84)
kc.matern<-krige.conv(geodataset,locations= dsgr.grid,
krige = krige.control(type.krige="OK",obj.m = lk.matern,  trend.l="2nd", trend.d= "2nd"))
image(kc.matern, xlim=range(poly84$x),ylim=range(poly84$y), borders = poly84)
contour(kc.matern,filled= TRUE,
coords.data=geodataset$coords,xlim=range(poly84$x),ylim=range(poly84$y), col=terrain.colors(30), borders = poly84)
contour(kc.matern,filled= TRUE,val=sqrt(kc.matern$krige.var),
coords.data=geodataset$coords,xlim=range(poly84$x),ylim=range(poly84$y), col = gray(seq(1, 0.1, l = 30)), borders = poly84[,1:3])
set.seed(41) #fix the seed
indep.env <- variog.mc.env(geodataset.residuals, obj.variog = vario.b.robust,nsim = 3000)
plot(vario.b.robust, envelope = indep.env, main = "CONFIDENCE BANDS FOR INDEPENDENT MODEL",lwd = 2, pch = 16)
set.seed(41) #fix the seed
indep.env <- variog.mc.env(geodataset.residuals, obj.variog = vario.b.robust,nsim = 1500)
plot(vario.b.robust, envelope = indep.env, main = "CONFIDENCE BANDS FOR INDEPENDENT MODEL",lwd = 2, pch = 16)
set.seed(41) #fix the seed
indep.env <- variog.mc.env(geodataset.residuals, obj.variog = vario.b.robust,nsim = 3000)
plot(vario.b.robust, envelope = indep.env, main = "CONFIDENCE BANDS FOR INDEPENDENT MODEL",lwd = 2, pch = 16)
for( i in 1:100){
set.seed(i) #fix the seed
indep.env <- variog.mc.env(geodataset.residuals, obj.variog = vario.b.robust,nsim = 3000)
# plot(vario.b.robust, envelope = indep.env, main = "CONFIDENCE BANDS FOR INDEPENDENT MODEL",lwd = 2, pch = 16)
cat(i, ", ")
if( prod(vario.b.robust$v > indep.env$v.lower+1) ){
break
}
}
basquet <- read.csv("C:/Users/lofer/Dropbox/POLI/bayesiana/homewroks/basquet.txt", sep="")
head(basquet)
mean(basquet$acb)
mean(basquet$nba)
library(extraDistr)
# xx= seq(0,max(basquet))
xx= seq(range(basquet)[1]/2, range(basquet)[2]*1.5)
a=0.001
b=0.001
plot(xx, dgamma(xx, shape = a, scale = b), type="l", xlab=expression(lambda), ylab="Densidad", main="Gamma prior no informativa")
# par(mfrow=c(2,2))
plot( xx, dgpois(xx, shape = a, rate = b), type="l", main="Predictiva a priori", xlab="Nùmero de puntos", ylab="Densidad")
# xx= seq(0,12)
a1 = a + sum( basquet$acb )
b1 = b + length( basquet$acb )
a2 = a + sum( basquet$nba )
b2 = b + length( basquet$nba )
# par(mfrow=c(1,2))
plot( xx, dgpois(xx, shape = a1, rate = b2), type="l", xlab="Nùmero de puntos", ylab="Densidad", col="red", main="Predictiva a posteriori")
lines( xx, dgpois(xx, shape = a2, rate = b2), type="l", col="blue")
legend("topright", col=c("red", "blue"), legend=c("ACB", "NBA"), lwd=2)
i = 0:4e2
yy = dgpois(i, shape = a2, rate = b2) * ( 1 - pgpois(i, shape = a1, rate = b1))
m = max(yy)
center = which( m==yy)
plot(i, yy, type="l")
abline(v = center )
somma = 0
incr=1
threshold = 1e-5
i=center
j=center
while( incr > threshold ){
incr_i = dgpois(i, shape = a2, rate = b2) * ( 1 - pgpois(i, shape = a1, rate = b1))
incr_j = dgpois(j, shape = a2, rate = b2) * ( 1 - pgpois(j, shape = a1, rate = b1))
somma = somma + incr_i + incr_j
i = i+1
j = j-1
incr = incr_i + incr_j
}
somma
i=0:1e4
yy = dgpois(i, shape = a2, rate = b2) * pgpois(i-60, shape = a1, rate = b1)
center = which.max(yy)
somma = 0
incr=1
threshold = 1e-5
i=center
j=center
while( incr > threshold ){
incr_i = dgpois(i, shape = a2, rate = b2) * pgpois(i-60, shape = a1, rate = b1)
incr_j = dgpois(j, shape = a2, rate = b2) * pgpois(j-60, shape = a1, rate = b1)
somma = somma + incr_i + incr_j
i = i+1
j = j-1
incr = incr_i + incr_j
}
somma
df = data.frame( liga = c("ACB", "NBA"), promedio = c(mean(basquet$acb), mean(basquet$nba) ))
df = data.frame( liga = c("ACB", "NBA"), promedio = c(mean(basquet$acb), mean(basquet$nba) ))
df
a=2
b=3
var( dgamma(xx, shape = a, scale = b))
plot(xx, dgamma(xx, shape = a, scale = b), type="l", xlab=expression(lambda), ylab="Densidad", main="Gamma prior no informativa")
library(extraDistr)
# xx= seq(0,max(basquet))
xx= seq(range(basquet)[1]/2, range(basquet)[2]*1.5)
a=0.001
b=0.001
plot(xx, dgamma(xx, shape = a, scale = b), type="l", xlab=expression(lambda), ylab="Densidad", main="Gamma prior no informativa")
basquet <- read.csv("C:/Users/lofer/Dropbox/POLI/bayesiana/homewroks/basquet.txt", sep="")
head(basquet)
df = data.frame( liga = c("ACB", "NBA"), promedio = c(mean(basquet$acb), mean(basquet$nba) ))
df
library(extraDistr)
# xx= seq(0,max(basquet))
xx= seq(range(basquet)[1]/2, range(basquet)[2]*1.5)
a=0.001
b=0.001
plot(xx, dgamma(xx, shape = a, scale = b), type="l", xlab=expression(lambda), ylab="Densidad", main="Gamma prior no informativa")
plot(xx, dgamma(xx, shape = a, scale = b), type="l", xlab=expression(lambda), ylab="Densidad", main="Gamma prior no informativa")
# par(mfrow=c(2,2))
plot( xx, dgpois(xx, shape = a, rate = b), type="l", main="Predictiva a priori", xlab="Nùmero de puntos", ylab="Densidad")
# xx= seq(0,12)
a1 = a + sum( basquet$acb )
b1 = b + length( basquet$acb )
a2 = a + sum( basquet$nba )
b2 = b + length( basquet$nba )
# par(mfrow=c(1,2))
plot( xx, dgpois(xx, shape = a1, rate = b2), type="l", xlab="Nùmero de puntos", ylab="Densidad", col="red", main="Predictiva a posteriori")
lines( xx, dgpois(xx, shape = a2, rate = b2), type="l", col="blue")
legend("topright", col=c("red", "blue"), legend=c("ACB", "NBA"), lwd=2)
i = 0:4e2
yy = dgpois(i, shape = a2, rate = b2) * ( 1 - pgpois(i, shape = a1, rate = b1))
m = max(yy)
center = which( m==yy)
plot(i, yy, type="l")
abline(v = center )
somma = 0
incr=1
threshold = 1e-5
i=center
j=center
while( incr > threshold ){
incr_i = dgpois(i, shape = a2, rate = b2) * ( 1 - pgpois(i, shape = a1, rate = b1))
incr_j = dgpois(j, shape = a2, rate = b2) * ( 1 - pgpois(j, shape = a1, rate = b1))
somma = somma + incr_i + incr_j
i = i+1
j = j-1
incr = incr_i + incr_j
}
somma
i=0:1e4
yy = dgpois(i, shape = a2, rate = b2) * pgpois(i-60, shape = a1, rate = b1)
center = which.max(yy)
somma = 0
incr=1
threshold = 1e-5
i=center
j=center
while( incr > threshold ){
incr_i = dgpois(i, shape = a2, rate = b2) * pgpois(i-60, shape = a1, rate = b1)
incr_j = dgpois(j, shape = a2, rate = b2) * pgpois(j-60, shape = a1, rate = b1)
somma = somma + incr_i + incr_j
i = i+1
j = j-1
incr = incr_i + incr_j
}
somma
plot(xx, dgamma(xx, shape = a, scale = b), type="l", xlab=expression(lambda), ylab="Densidad", main="Gamma prior no informativa")
a1 = a + sum( basquet$acb )
b1 = b + length( basquet$acb )
a2 = a + sum( basquet$nba )
b2 = b + length( basquet$nba )
plot( xx, dgamma(xx, shape = a1, rate = b2), type="l", xlab="Nùmero de puntos", ylab="Densidad", col="red", main="Predictiva a posteriori")
lines( xx, dgamma(xx, shape = a2, rate = b2), type="l", col="blue")
legend("topright", col=c("red", "blue"), legend=c("ACB", "NBA"), lwd=2)
a1 = a + sum( basquet$acb )
b1 = b + length( basquet$acb )
a2 = a + sum( basquet$nba )
b2 = b + length( basquet$nba )
plot( xx, dgamma(xx, shape = a1, rate = b2), type="l", xlab="Nùmero de puntos", ylab="Densidad", col="red",
main="Distribuciones a posteriori", xlim=c(120, 250))
lines( xx, dgamma(xx, shape = a2, rate = b2), type="l", col="blue")
legend("topright", col=c("red", "blue"), legend=c("ACB", "NBA"), lwd=2)
plot( xx, dgpois(xx, shape = a1, rate = b2), type="l", xlab="Nùmero de puntos", ylab="Densidad", col="red", main="Predictiva a posteriori")
lines( xx, dgpois(xx, shape = a2, rate = b2), type="l", col="blue")
legend("topright", col=c("red", "blue"), legend=c("ACB", "NBA"), lwd=2)
plot( xx, dgpois(xx, shape = a1, rate = b2), type="l", xlab="Nùmero de puntos", ylab="Densidad", col="red", main="Predictivas a posteriori")
lines( xx, dgpois(xx, shape = a2, rate = b2), type="l", col="blue")
legend("topright", col=c("red", "blue"), legend=c("ACB", "NBA"), lwd=2)
a1 = a + sum( basquet$acb )
b1 = b + length( basquet$acb )
a2 = a + sum( basquet$nba )
b2 = b + length( basquet$nba )
plot( xx, dgamma(xx, shape = a1, rate = b2), type="l", xlab="Nùmero de puntos", ylab="Densidad", col="red",
main="Distribuciones a posteriori", xlim=c(130, 230))
lines( xx, dgamma(xx, shape = a2, rate = b2), type="l", col="blue")
legend("topright", col=c("red", "blue"), legend=c("ACB", "NBA"), lwd=2)
plot( xx, dgamma(xx, shape = a1, rate = b2), type="l", xlab="Nùmero de puntos", ylab="Densidad", col="red",
main="Distribuciones a posteriori", xlim=c(140, 230))
a1 = a + sum( basquet$acb )
b1 = b + length( basquet$acb )
a2 = a + sum( basquet$nba )
b2 = b + length( basquet$nba )
plot( xx, dgamma(xx, shape = a1, rate = b2), type="l", xlab="Nùmero de puntos", ylab="Densidad", col="red",
main="Distribuciones a posteriori", xlim=c(140, 230))
lines( xx, dgamma(xx, shape = a2, rate = b2), type="l", col="blue")
legend("topright", col=c("red", "blue"), legend=c("ACB", "NBA"), lwd=2)
a1 = a + sum( basquet$acb )
b1 = b + length( basquet$acb )
a2 = a + sum( basquet$nba )
b2 = b + length( basquet$nba )
plot( xx, dgamma(xx, shape = a1, rate = b2), type="l", xlab=expression(lambda), ylab="Densidad", col="red",
main="Distribuciones a posteriori", xlim=c(140, 230))
lines( xx, dgamma(xx, shape = a2, rate = b2), type="l", col="blue")
legend("topright", col=c("red", "blue"), legend=c("ACB", "NBA"), lwd=2)
a1 = a + sum( basquet$acb )
b1 = b + length( basquet$acb )
a2 = a + sum( basquet$nba )
b2 = b + length( basquet$nba )
plot( xx, dgamma(xx, shape = a1, rate = b2), type="l", xlab=expression(lambda), ylab="Densidad", col="red",
main="Distribuciones a posteriori", xlim=c(140, 230))
lines( xx, dgamma(xx, shape = a2, rate = b2), type="l", col="blue")
legend("topright", col=c("red", "blue"), legend=c("ACB", "NBA"), lwd=2)
basquet <- read.csv("C:/Users/lofer/Dropbox/POLI/bayesiana/homewroks/basquet.txt", sep="")
head(basquet)
df = data.frame( liga = c("ACB", "NBA"), promedio = c(mean(basquet$acb), mean(basquet$nba) ))
df
library(extraDistr)
# xx= seq(0,max(basquet))
xx= seq(range(basquet)[1]/2, range(basquet)[2]*1.5)
a=0.001
b=0.001
plot(xx, dgamma(xx, shape = a, scale = b), type="l", xlab=expression(lambda), ylab="Densidad", main="Gamma prior no informativa")
plot( xx, dgpois(xx, shape = a, rate = b), type="l", main="Predictiva a priori", xlab="Nùmero de puntos", ylab="Densidad")
a1 = a + sum( basquet$acb )
b1 = b + length( basquet$acb )
a2 = a + sum( basquet$nba )
b2 = b + length( basquet$nba )
plot( xx, dgamma(xx, shape = a1, rate = b2), type="l", xlab=expression(lambda), ylab="Densidad", col="red",
main="Distribuciones a posteriori", xlim=c(140, 230))
lines( xx, dgamma(xx, shape = a2, rate = b2), type="l", col="blue")
legend("topright", col=c("red", "blue"), legend=c("ACB", "NBA"), lwd=2)
plot( xx, dgpois(xx, shape = a1, rate = b2), type="l", xlab="Nùmero de puntos", ylab="Densidad", col="red", main="Predictivas a posteriori")
lines( xx, dgpois(xx, shape = a2, rate = b2), type="l", col="blue")
legend("topright", col=c("red", "blue"), legend=c("ACB", "NBA"), lwd=2)
i = 0:4e2
yy = dgpois(i, shape = a2, rate = b2) * ( 1 - pgpois(i, shape = a1, rate = b1))
m = max(yy)
center = which( m==yy)
plot(i, yy, type="l")
abline(v = center )
somma = 0
incr=1
threshold = 1e-5
i=center
j=center
while( incr > threshold ){
incr_i = dgpois(i, shape = a2, rate = b2) * ( 1 - pgpois(i, shape = a1, rate = b1))
incr_j = dgpois(j, shape = a2, rate = b2) * ( 1 - pgpois(j, shape = a1, rate = b1))
somma = somma + incr_i + incr_j
i = i+1
j = j-1
incr = incr_i + incr_j
}
somma
i=0:1e4
yy = dgpois(i, shape = a2, rate = b2) * pgpois(i-60, shape = a1, rate = b1)
center = which.max(yy)
somma = 0
incr=1
threshold = 1e-5
i=center
j=center
while( incr > threshold ){
incr_i = dgpois(i, shape = a2, rate = b2) * pgpois(i-60, shape = a1, rate = b1)
incr_j = dgpois(j, shape = a2, rate = b2) * pgpois(j-60, shape = a1, rate = b1)
somma = somma + incr_i + incr_j
i = i+1
j = j-1
incr = incr_i + incr_j
}
somma
a1 = a + sum( basquet$acb )
b1 = b + length( basquet$acb )
a2 = a + sum( basquet$nba )
b2 = b + length( basquet$nba )
par(mfrow=c(1,2))
plot( xx, dgamma(xx, shape = a1, rate = b2), type="l", xlab=expression(lambda), ylab="Densidad", col="red",
main="Distribuciones a posteriori", xlim=c(140, 230))
lines( xx, dgamma(xx, shape = a2, rate = b2), type="l", col="blue")
legend("topright", col=c("red", "blue"), legend=c("ACB", "NBA"), lwd=2)
plot( xx, dgpois(xx, shape = a1, rate = b2), type="l", xlab="Nùmero de puntos", ylab="Densidad", col="red", main="Predictivas a posteriori")
lines( xx, dgpois(xx, shape = a2, rate = b2), type="l", col="blue")
legend("topright", col=c("red", "blue"), legend=c("ACB", "NBA"), lwd=2)
i = 0:4e2
yy = dgpois(i, shape = a2, rate = b2) * ( 1 - pgpois(i, shape = a1, rate = b1))
m = max(yy)
center = which( m==yy)
center
which.max(yy)
i = 0:4e2
yy = dgpois(i, shape = a2, rate = b2) * ( 1 - pgpois(i, shape = a1, rate = b1))
center = which.max(yy)
somma = 0
incr=1
threshold = 1e-5
i=center
j=center
while( incr > threshold ){
incr_i = dgpois(i, shape = a2, rate = b2) * ( 1 - pgpois(i, shape = a1, rate = b1))
incr_j = dgpois(j, shape = a2, rate = b2) * ( 1 - pgpois(j, shape = a1, rate = b1))
somma = somma + incr_i + incr_j
i = i+1
j = j-1
incr = incr_i + incr_j
}
somma
i=0:1e4
yy = dgpois(i, shape = a2, rate = b2) * pgpois(i-60, shape = a1, rate = b1)
center = which.max(yy)
somma = 0
incr=1
threshold = 1e-5
i=center
j=center
while( incr > threshold ){
incr_i = dgpois(i, shape = a2, rate = b2) * pgpois(i-60, shape = a1, rate = b1)
incr_j = dgpois(j, shape = a2, rate = b2) * pgpois(j-60, shape = a1, rate = b1)
somma = somma + incr_i + incr_j
i = i+1
j = j-1
incr = incr_i + incr_j
}
somma
somma = 0
for(i in 0:1e4){
somma = somma +  dgpois(i, shape = a2, rate = b2) * pgpois(i-60, shape = a1, rate = b1)
}
somma
i=0:1e4
yy = dgpois(i, shape = a2, rate = b2) * pgpois(i-60, shape = a1, rate = b1)
center = which.max(yy)
somma = 0
incr=1
threshold = 1e-5
i=center
j=center
while( incr > threshold ){
incr_i = dgpois(i, shape = a2, rate = b2) * pgpois(i-60, shape = a1, rate = b1)
incr_j = dgpois(j, shape = a2, rate = b2) * pgpois(j-60, shape = a1, rate = b1)
somma = somma + incr_i + incr_j
i = i+1
j = j-1
incr = incr_i + incr_j
}
somma
library(extraDistr)
# xx= seq(0,max(basquet))
xx= seq(range(basquet)[1]/2, range(basquet)[2]*1.5)
a=0.001
b=0.001
par(mfrow=c(1,2))
plot(xx, dgamma(xx, shape = a, scale = b), type="l", xlab=expression(lambda), ylab="Densidad", main="Gamma prior no informativa")
plot( xx, dgpois(xx, shape = a, rate = b), type="l", main="Predictiva a priori", xlab="Nùmero de puntos", ylab="Densidad")
