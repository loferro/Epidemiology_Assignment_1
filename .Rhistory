load("~/GitHub/Epidemiology_Assignment_1/.RData")
load("~/GitHub/Epidemiology_Assignment_1/.RData")
par(mfrow = c(1, 4))
env <- variog.model.env(geodataset.residuals, obj.variog = variogramma,
model.pars = lk.exponential)
library(geoR)
# Theoretical variogram: Estimate the nugget parameter
lk.exponential <- likfit(geodataset.residuals, cov.model = "exponential", ini = c(sill, range), fix.nugget = F, nugget = range, lik.method = "ML")
lk.exponential
lk.gaussian <- likfit(geodataset.residuals, cov.model = "gaussian", ini = c(86, 8), fix.nugget = F, nugget = 500, lik.method = "ML")
lk.gaussian
# lk.spherical <- likfit(geodataset.residuals, cov.model = "spherical", ini = c(sill, range), fix.nugget = F, nugget = range, lik.method = "ML", trend = "1st")
lk.spherical <- likfit(geodataset.residuals, cov.model = "spherical", ini = c(sill, range), fix.nugget = F, nugget = range, lik.method = "ML")
lk.spherical
par(mfrow = c(1, 4))
env <- variog.model.env(geodataset.residuals, obj.variog = variogramma, model.pars = lk.exponential)
plot(variogramma, main = "Exponential", lwd = 2, pch = 16, envelope = env)
env <- variog.model.env(geodataset.residuals, obj.variog = variogramma, model.pars = lk.gaussian)
plot(variogramma, main = "Gaussian", lwd = 2, pch = 16, envelope = env, cex.main = 1)
env <- variog.model.env(geodataset.residuals, obj.variog = variogramma, model.pars = lk.spherical)
plot(variogramma, main = "Spherical", lwd = 2, pch = 16, envelope = env, cex.main = 1)
# env <- variog.model.env(geodataset.residuals, obj.variog = variogramma, model.pars = lk.matern)
# plot(variogramma,main = "Matern", lwd = 2, pch = 16, envelope = env, cex.main = 1)
save.image(".RData")
lk.matern <- likfit(geodataset.residuals, cov.model = "matern",
ini = c(86, 11), fix.nugget = F, nugget = range, fix.kappa = FALSE,
kappa = 1, lik.method = "ML")
lk.matern
par(mfrow = c(1, 4))
env <- variog.model.env(geodataset.residuals, obj.variog = variogramma, model.pars = lk.exponential)
plot(variogramma, main = "Exponential", lwd = 2, pch = 16, envelope = env)
env <- variog.model.env(geodataset.residuals, obj.variog = variogramma, model.pars = lk.gaussian)
plot(variogramma, main = "Gaussian", lwd = 2, pch = 16, envelope = env, cex.main = 1)
env <- variog.model.env(geodataset.residuals, obj.variog = variogramma, model.pars = lk.spherical)
plot(variogramma, main = "Spherical", lwd = 2, pch = 16, envelope = env, cex.main = 1)
env <- variog.model.env(geodataset.residuals, obj.variog = variogramma, model.pars = lk.matern)
plot(variogramma,main = "Matern", lwd = 2, pch = 16, envelope = env, cex.main = 1)
save.image(".RData")
set.seed(10)
par(mfrow = c(1, 4))
# CONFIDENCE BANDS FOR EMPIRICAL VARIOGRAM MODELù
env <- variog.model.env(geodataset.residuals, obj.variog = variogramma,
model.pars = wls.exponential, nsim = 999)
plot(variogramma, main = "Exponential", lwd = 2, pch = 16, envelope = env)
env <- variog.model.env(geodataset.residuals, obj.variog = variogramma,
model.pars = wls.gaussian, nsim = 999)
plot(variogramma, main = "Gaussian", lwd = 2, pch = 16, envelope = env)
env <- variog.model.env(geodataset.residuals, obj.variog = variogramma,
model.pars = wls.spherical, nsim = 999)
plot(variogramma, main = "Spherical", lwd = 2, pch = 16, envelope = env)
env <- variog.model.env(geodataset.residuals, obj.variog = variogramma,
model.pars = wls.matern, nsim = 999)
wls.matern <- variofit(variogramma, cov.model = "matern", ini = c(86, 11), fix.nugget = F, nugget = range, fix.kappa = FALSE, kappa = 0.5, weights = "cressie")
wls.matern
summary(wls.matern)$sum.of.squares
plot(variogramma, main = "PARAMETRIC VARIOGRAMS", cex.main = 1,
pch = 16) #empirical variogram
lines(wls.exponential, lwd = 2, col = "red", max.dist = dist.max.data) # add exponential
lines(wls.gaussian, lwd = 2, col = "blue", max.dist = dist.max.data) # add guassian
lines(wls.spherical, lwd = 2, col = "green3", max.dist = dist.max.data) # add spherical
lines(wls.matern, lwd = 2, col = "yellow", max.dist = dist.max.data) # add matern
legend(x = "bottomright", inset = 0.01, lty = c(1, 1), col = c("red",
"blue", "green3", "yellow"), legend = c("Exponetial", "Gaussian",
"Spherical", "Matern"), cex = 1)
set.seed(10)
par(mfrow = c(1, 4))
# CONFIDENCE BANDS FOR EMPIRICAL VARIOGRAM MODELù
env <- variog.model.env(geodataset.residuals, obj.variog = variogramma,
model.pars = wls.exponential, nsim = 999)
plot(variogramma, main = "Exponential", lwd = 2, pch = 16, envelope = env)
env <- variog.model.env(geodataset.residuals, obj.variog = variogramma,
model.pars = wls.gaussian, nsim = 999)
plot(variogramma, main = "Gaussian", lwd = 2, pch = 16, envelope = env)
env <- variog.model.env(geodataset.residuals, obj.variog = variogramma,
model.pars = wls.spherical, nsim = 999)
plot(variogramma, main = "Spherical", lwd = 2, pch = 16, envelope = env)
env <- variog.model.env(geodataset.residuals, obj.variog = variogramma,
model.pars = wls.matern, nsim = 999)
plot(variogramma, main = "Matern", lwd = 2, pch = 16, envelope = env)
plot(variogramma, main = "PARAMETRIC VARIOGRAMS", cex.main = 1, pch = 16) #empirical variogram
lines(lk.exponential, lwd = 2, col = "red", max.dist = dist.max.data) # add exponential
plot(variogramma, main = "PARAMETRIC VARIOGRAMS", cex.main = 1, pch = 16) #empirical variogram
lines(lk.exponential, lwd = 2, col = "red", max.dist = dist.max.data) # add exponential
lines(wls.gaussian, lwd = 2, col = "blue", max.dist = dist.max.data) # add guassian
lines(wls.spherical, lwd = 2, col = "green3", max.dist = dist.max.data) # add spherical
lines(wls.matern, lwd = 2, col = "yellow", max.dist = dist.max.data) # add matern
legend(x = "bottomright", inset = 0.01, lty = c(1, 1), col = c("red",
"blue", "green3", "yellow"), legend = c("Exponetial", "Gaussian",
"Spherical", "Matern"), cex = 1)
save.image(".RData")
summary(wls.exponential)$sum.of.squares
summary(wls.gaussian)$sum.of.squares
summary(wls.spherical)$sum.of.squares
summary(wls.matern)$sum.of.squares
data.frame( model = c("exponential",
"gaussian",
"spherical",
"matern"),
sum.of.squares = c(summary(wls.exponential)$sum.of.squares,
summary(wls.gaussian)$sum.of.squares,
summary(wls.spherical)$sum.of.squares,
summary(wls.matern)$sum.of.squares)
)
lk.matern$loglik
data.frame( model = c("exponential",
"gaussian",
"spherical",
"matern"),
sum.of.squares = c(lk.exponential,
lk.gaussian,
lk.spherical,
lk.matern)
)
data.frame( model = c("exponential",
"gaussian",
"spherical",
"matern"),
sum.of.squares = c(lk.exponential$loglik,
lk.gaussian$loglik,
lk.spherical$loglik,
lk.matern$loglik
)
)
data.frame( model = c("exponential",
"gaussian",
"spherical",
"matern"),
loglikelihood = c(lk.exponential$loglik,
lk.gaussian$loglik,
lk.spherical$loglik,
lk.matern$loglik
)
)
lk.matern <- likfit(geodataset.residuals, cov.model = "matern",
ini = c(86, 11), fix.nugget = F, nugget = range, fix.kappa = FALSE,
kappa = 1, lik.method = "ML")
lk.matern
source("RoseDiagram.R")
NumCases = length(variod$`0`)
# crit.val~sill
# max.dist = massimo valore di dstanza
rose.diagram(data.var = geodataset.residuals$data, data.cds = geodataset.residuals$coord,
max.dist = 80, numcases = NumCases, numdirec = 4, poly.tnd = "cte",
crit.val = 120)
lines(lk.exponential, lwd = 2, col = "red", max.dist = dist.max.data) # add exponential
plot(variogramma, main = "PARAMETRIC VARIOGRAMS", cex.main = 1, pch = 16) #empirical variogram
lines(lk.exponential, lwd = 2, col = "red", max.dist = dist.max.data) # add exponential
lines(lk.gaussian, lwd = 2, col = "blue", max.dist = dist.max.data) # add guassian
lines(lk.spherical, lwd = 2, col = "green3", max.dist = dist.max.data) # add spherical
lines(lk.matern, lwd = 2, col = "yellow", max.dist = dist.max.data) # add matern
legend(x = "bottomright", inset = 0.01, lty = c(1, 1), col = c("red",
"blue", "green3", "yellow"), legend = c("Exponetial", "Gaussian",
"Spherical", "Matern"), cex = 1)
# lk.spherical <- likfit(geodataset.residuals, cov.model = "spherical", ini = c(sill, range), fix.nugget = F, nugget = range, lik.method = "ML", trend = "1st")
lk.spherical <- likfit(geodataset.residuals, cov.model = "spherical", ini = c(sill, range), fix.nugget = F, nugget = range, lik.method = "ML")
lk.spherical
# lk.spherical <- likfit(geodataset.residuals, cov.model = "spherical", ini = c(sill, range), fix.nugget = F, nugget = range, lik.method = "ML", trend = "1st")
lk.spherical <- likfit(geodataset.residuals, cov.model = "spherical", ini = c(sill, range), fix.nugget = F, nugget = range, lik.method = "ML")
lk.spherical <- likfit(geodataset.residuals, cov.model = "spherical", ini = c(sill, range), lik.method = "ML")
lk.spherical
# lk.spherical <- likfit(geodataset.residuals, cov.model = "spherical", ini = c(sill, range), fix.nugget = F, nugget = range, lik.method = "ML", trend = "1st")
lk.spherical <- likfit(geodataset.residuals, cov.model = "spherical", ini = c(sill, range), fix.nugget = F, nugget = range, lik.method = "ML")
lk.spherical
lk.spherical <- likfit(geodataset.residuals, cov.model = "spherical", ini = c(sill, range), lik.method = "ML")
lk.spherical
lk.gaussian <- likfit(geodataset.residuals, cov.model = "gaussian", ini = c(86, 8), fix.nugget = F, nugget = 500, lik.method = "ML")
lk.gaussian
lk.gaussian <- likfit(geodataset.residuals, cov.model = "gaussian", ini = c(86, 8),lik.method = "ML")
lk.gaussian
library(geoR)
# Theoretical variogram: Estimate the nugget parameter
lk.exponential <- likfit(geodataset.residuals, cov.model = "exponential", ini = c(sill, range), lik.method = "ML")
lk.exponential
lk.matern <- likfit(geodataset.residuals, cov.model = "matern", ini = c(86, 11), fix.nugget = F, nugget = range, fix.kappa = FALSE, kappa = 1, lik.method = "ML")
lk.matern
lk.matern <- likfit(geodataset.residuals, cov.model = "matern", ini = c(86, 11), lik.method = "ML")
lk.matern
lk.matern <- likfit(geodataset.residuals, cov.model = "matern", ini = c(86, 11), fix.nugget = F, nugget = range, fix.kappa = FALSE, kappa = 1, lik.method = "ML")
lk.matern
lk.matern <- likfit(geodataset.residuals, cov.model = "matern", ini = c(86, 11), lik.method = "ML")
lk.matern
wls.gaussian <- variofit(variogramma, cov.model = "gaussian", ini = c(86, 8), fix.nugget = F, nugget = range, weights = "cressie")
wls.gaussian
summary(wls.gaussian)$sum.of.squares
wls.gaussian
wls.gaussian <- variofit(variogramma, cov.model = "gaussian", ini = c(86, 8), fix.nugget = F, nugget = range, weights = "cressie")
wls.gaussian
# summary(wls.gaussian)$sum.of.squares
wls.gaussian
plot(variogramma, main = "Exponential", lwd = 2, pch = 16, envelope = env)
plot(variogramma, main = "Gaussian", lwd = 2, pch = 16, envelope = env, cex.main = 1)
plot(variogramma, main = "Spherical", lwd = 2, pch = 16, envelope = env, cex.main = 1)
plot(variogramma,main = "Matern", lwd = 2, pch = 16, envelope = env, cex.main = 1)
par(mfrow = c(1, 4))
plot(variogramma, main = "Exponential", lwd = 2, pch = 16, envelope = env)
plot(variogramma, main = "Gaussian", lwd = 2, pch = 16, envelope = env, cex.main = 1)
plot(variogramma, main = "Spherical", lwd = 2, pch = 16, envelope = env, cex.main = 1)
plot(variogramma,main = "Matern", lwd = 2, pch = 16, envelope = env, cex.main = 1)
rnx <- range(geodataset$coords[,1]) #Minimum and aximum of the latitude
rnx
rnx <- range(geodataset$coords[,1]) #Minimum and aximum of the latitude
rny <- range(geodataset$coords[,2]) #Minimum and Maximum of the longitude
newx.grid <- seq(rnx[1],rnx[2],l=51) #Create a sequence from minimum to
#maximum of the latitude of 51 points
newy.grid <- seq(rny[1],rny[2],l=51) #Create a sequence from minimum to
#maximum of the longitude of 51 points
dsgr.grid <- expand.grid(newx=newx.grid, newy=newy.grid) #expand, to create a grid
points(geodataset)
points(dsgr.grid, pch = 19, col = 4, cex = 0.25)
rnx <- range(geodataset$coords[,1]) #Minimum and aximum of the latitude
rny <- range(geodataset$coords[,2]) #Minimum and Maximum of the longitude
newx.grid <- seq(rnx[1],rnx[2],l=51) #Create a sequence from minimum to
#maximum of the latitude of 51 points
newy.grid <- seq(rny[1],rny[2],l=51) #Create a sequence from minimum to
#maximum of the longitude of 51 points
dsgr.grid <- expand.grid(newx=newx.grid, newy=newy.grid) #expand, to create a grid
plot(poly84, type="l")
plot(poly84, type="l")
plot(poly84)
poly84
rnx <- range(geodataset$coords[,1]) #Minimum and aximum of the latitude
rny <- range(geodataset$coords[,2]) #Minimum and Maximum of the longitude
newx.grid <- seq(rnx[1],rnx[2],l=51) #Create a sequence from minimum to
#maximum of the latitude of 51 points
newy.grid <- seq(rny[1],rny[2],l=51) #Create a sequence from minimum to
#maximum of the longitude of 51 points
dsgr.grid <- expand.grid(newx=newx.grid, newy=newy.grid) #expand, to create a grid
plot(poly84[,1:2], type="l")
points(geodataset)
points(dsgr.grid, pch = 19, col = 4, cex = 0.25)
plot(poly84[,1:2], type="l", add=T)
rnx <- range(geodataset$coords[,1]) #Minimum and aximum of the latitude
rny <- range(geodataset$coords[,2]) #Minimum and Maximum of the longitude
newx.grid <- seq(rnx[1],rnx[2],l=51) #Create a sequence from minimum to
#maximum of the latitude of 51 points
newy.grid <- seq(rny[1],rny[2],l=51) #Create a sequence from minimum to
#maximum of the longitude of 51 points
dsgr.grid <- expand.grid(newx=newx.grid, newy=newy.grid) #expand, to create a grid
points(geodataset)
lines(poly84[,1:2], type="l")
points(dsgr.grid, pch = 19, col = 4, cex = 0.25)
rnx <- range(geodataset$coords[,1]) #Minimum and aximum of the latitude
rny <- range(geodataset$coords[,2]) #Minimum and Maximum of the longitude
newx.grid <- seq(rnx[1],rnx[2],l=51) #Create a sequence from minimum to
#maximum of the latitude of 51 points
newy.grid <- seq(rny[1],rny[2],l=51) #Create a sequence from minimum to
#maximum of the longitude of 51 points
dsgr.grid <- expand.grid(newx=newx.grid, newy=newy.grid) #expand, to create a grid
points(geodataset, ylim=range(poly84$y))
lines(poly84[,1:2], type="l")
points(dsgr.grid, pch = 19, col = 4, cex = 0.25)
kc.gaussian<-krige.conv(geodataset,locations= dsgr.grid,
krige =krige.control(type.krige="OK",obj.m = lk.gaussian,
trend.l="1st" ,trend.d= "1st"))
image(kc.gaussian,xlim=c(100,800),ylim=c(50,550))
image(kc.gaussian,xlim=range(poly84$x),ylim=poly84$y))
image(kc.gaussian,xlim=range(poly84$x),ylim=range(poly84$y))
contour(kc.gaussian,filled= TRUE,
coords.data=geodataset$coords,col=terrain.colors(31),xlim=range(poly84$x),ylim=range(poly84$y))
contour(kc.gaussian,filled= TRUE,val=sqrt(kc.gaussian$krige.var),
coords.data=geodataset$coords,xlim=range(poly84$x),ylim=range(poly84$y),
col = gray(seq(1, 0.1, l = 30)), main="Plot of Standard Deviation")
xv.gaussian <- xvalid(geodataset, model =lk.gaussian, reestimate = F)
names(xv.gaussian)
VC1.gaussian <- abs(mean(xv.gaussian$error/sqrt(xv.gaussian$krige.var)))
VC1.gaussian
VC2.gaussian <- sqrt(mean((xv.gaussian$error/sqrt(xv.gaussian$krige.var))^2))
VC2.gaussian
VC1.gaussian <- abs(mean(xv.gaussian$error/sqrt(xv.gaussian$krige.var)))
VC2.gaussian <- sqrt(mean((xv.gaussian$error/sqrt(xv.gaussian$krige.var))^2))
VC3.gaussian <- sqrt(mean(xv.gaussian$error^2))
data.frame( index = c("VC1", "VC2", "VC3"), value = c(VC1.gaussian, VC2.gaussian, VC3.gaussian) )
kc.spherical<-krige.conv(geodataset,locations= dsgr.grid,
krige =krige.control(type.krige="OK",obj.m = lk.spherical,
trend.l="1st" ,trend.d= "1st"))
image(kc.spherical,xlim=c(100,800),ylim=c(50,550))
contour(kc.spherical,filled= TRUE,
coords.data=geodataset$coords,xlim=c(100,800),ylim=c(50,550),
col=terrain.colors(30))
contour(kc.gaussian,filled= TRUE,val=sqrt(kc.gaussian$krige.var),
coords.data=geodataset$coords,xlim=c(100,800),ylim=c(50,550),
col = gray(seq(1, 0.1, l = 30)))
xv.spherical <- xvalid(geodataset, model =lk.spherical, reestimate = F)
VC1.spherical <- mean(xv.spherical$error/sqrt(xv.spherical$krige.var));
VC1.spherical
VC2.spherical <- sqrt(mean((xv.spherical$error/sqrt(xv.spherical$krige.var))^2));
VC2.spherical
VC3.spherical <- sqrt(mean(xv.spherical$error^2));
VC3.spherical
save.image(".RData")
kc.spherical<-krige.conv(geodataset,locations= dsgr.grid,
krige =krige.control(type.krige="OK",obj.m = lk.spherical,
trend.l="1st" ,trend.d= "1st"))
image(kc.spherical, xlim=range(poly84$x),ylim=range(poly84$y))
contour(kc.spherical,filled= TRUE,
coords.data=geodataset$coords,xlim=range(poly84$x),ylim=range(poly84$y),
col=terrain.colors(30))
contour(kc.gaussian,filled= TRUE,val=sqrt(kc.gaussian$krige.var),
coords.data=geodataset$coords,xlim=range(poly84$x),ylim=range(poly84$y),
col = gray(seq(1, 0.1, l = 30)))
xv.spherical <- xvalid(geodataset, model =lk.spherical, reestimate = F)
VC1.spherical <- mean(xv.spherical$error/sqrt(xv.spherical$krige.var));
VC1.spherical
VC2.spherical <- sqrt(mean((xv.spherical$error/sqrt(xv.spherical$krige.var))^2));
VC2.spherical
VC3.spherical <- sqrt(mean(xv.spherical$error^2));
VC3.spherical
save.image(".RData")
VC1.spherical <- abs(mean(xv.spherical$error/sqrt(xv.spherical$krige.var)))
VC2.spherical <- sqrt(mean((xv.spherical$error/sqrt(xv.spherical$krige.var))^2))
VC3.spherical <- sqrt(mean(xv.spherical$error^2))
data.frame( index = c("VC1", "VC2", "VC3"), value = c(VC1.spherical, VC2.spherical, VC3.spherical) )
contour(kc.spherical,filled= TRUE,val=sqrt(kc.spherical$krige.var),
coords.data=geodataset$coords,xlim=range(poly84$x),ylim=range(poly84$y),
col = gray(seq(1, 0.1, l = 30)))
rnx <- range(geodataset$coords[,1]) #Minimum and aximum of the latitude
rny <- range(geodataset$coords[,2]) #Minimum and Maximum of the longitude
newx.grid <- seq(rnx[1],rnx[2],l=51) #Create a sequence from minimum to
#maximum of the latitude of 51 points
newy.grid <- seq(rny[1],rny[2],l=51) #Create a sequence from minimum to
#maximum of the longitude of 51 points
dsgr.grid <- expand.grid(newx=newx.grid, newy=newy.grid) #expand, to create a grid
points(geodataset, ylim=range(poly84$y))
lines(poly84[,1:2], type="l")
points(dsgr.grid, pch = 19, col = 4, cex = 0.25)
kc.gaussian<-krige.conv(geodataset,locations= dsgr.grid,
krige =krige.control(type.krige="OK",obj.m = lk.gaussian,
trend.l="1st" ,trend.d= "1st"))
image(kc.gaussian,xlim=range(poly84$x),ylim=range(poly84$y))
contour(kc.gaussian,filled= TRUE,
coords.data=geodataset$coords,col=terrain.colors(31),xlim=range(poly84$x),ylim=range(poly84$y))
contour(kc.gaussian,filled= TRUE,val=sqrt(kc.gaussian$krige.var),
coords.data=geodataset$coords,xlim=range(poly84$x),ylim=range(poly84$y),
col = gray(seq(1, 0.1, l = 30)), main="Plot of Standard Deviation")
xv.gaussian <- xvalid(geodataset, model =lk.gaussian, reestimate = F)
names(xv.gaussian)
VC1.gaussian <- abs(mean(xv.gaussian$error/sqrt(xv.gaussian$krige.var)))
VC2.gaussian <- sqrt(mean((xv.gaussian$error/sqrt(xv.gaussian$krige.var))^2))
VC3.gaussian <- sqrt(mean(xv.gaussian$error^2))
data.frame( index = c("VC1", "VC2", "VC3"), value = c(VC1.gaussian, VC2.gaussian, VC3.gaussian) )
kc.spherical<-krige.conv(geodataset,locations= dsgr.grid,
krige =krige.control(type.krige="OK",obj.m = lk.spherical,
trend.l="1st" ,trend.d= "1st"))
image(kc.spherical, xlim=range(poly84$x),ylim=range(poly84$y))
contour(kc.spherical,filled= TRUE,
coords.data=geodataset$coords,xlim=range(poly84$x),ylim=range(poly84$y),
col=terrain.colors(30))
contour(kc.spherical,filled= TRUE,val=sqrt(kc.spherical$krige.var),
coords.data=geodataset$coords,xlim=range(poly84$x),ylim=range(poly84$y),
col = gray(seq(1, 0.1, l = 30)))
xv.spherical <- xvalid(geodataset, model =lk.spherical, reestimate = F)
VC1.spherical <- abs(mean(xv.spherical$error/sqrt(xv.spherical$krige.var)))
VC2.spherical <- sqrt(mean((xv.spherical$error/sqrt(xv.spherical$krige.var))^2))
VC3.spherical <- sqrt(mean(xv.spherical$error^2))
data.frame( index = c("VC1", "VC2", "VC3"), value = c(VC1.spherical, VC2.spherical, VC3.spherical) )
kc.exponential<-krige.conv(geodataset,locations= dsgr.grid,
krige =krige.control(type.krige="OK",obj.m = lk.exponential,
trend.l="1st" ,trend.d= "1st"))
image(kc.exponential, xlim=range(poly84$x),ylim=range(poly84$y))
contour(kc.exponential,filled= TRUE,
coords.data=geodataset$coords,xlim=range(poly84$x),ylim=range(poly84$y),
col=terrain.colors(30))
contour(kc.exponential,filled= TRUE,val=sqrt(kc.exponential$krige.var),
coords.data=geodataset$coords,xlim=range(poly84$x),ylim=range(poly84$y),
col = gray(seq(1, 0.1, l = 30)))
xv.exponential <- xvalid(geodataset, model =lk.exponential, reestimate = F)
VC1.exponential <- abs(mean(xv.exponential$error/sqrt(xv.exponential$krige.var)))
VC2.exponential <- sqrt(mean((xv.exponential$error/sqrt(xv.exponential$krige.var))^2))
VC3.exponential <- sqrt(mean(xv.exponential$error^2))
data.frame( index = c("VC1", "VC2", "VC3"), value = c(VC1.exponential, VC2.exponential, VC3.exponential) )
kc.matern<-krige.conv(geodataset,locations= dsgr.grid,
krige =krige.control(type.krige="OK",obj.m = lk.matern,
trend.l="1st" ,trend.d= "1st"))
image(kc.matern, xlim=range(poly84$x),ylim=range(poly84$y))
contour(kc.matern,filled= TRUE,
coords.data=geodataset$coords,xlim=range(poly84$x),ylim=range(poly84$y),
col=terrain.colors(30))
contour(kc.matern,filled= TRUE,val=sqrt(kc.matern$krige.var),
coords.data=geodataset$coords,xlim=range(poly84$x),ylim=range(poly84$y),
col = gray(seq(1, 0.1, l = 30)))
xv.matern <- xvalid(geodataset, model =lk.matern, reestimate = F)
VC1.matern <- abs(mean(xv.matern$error/sqrt(xv.matern$krige.var)))
VC2.matern <- sqrt(mean((xv.matern$error/sqrt(xv.matern$krige.var))^2))
VC3.matern <- sqrt(mean(xv.matern$error^2))
data.frame( index = c("VC1", "VC2", "VC3"), value = c(VC1.matern, VC2.matern, VC3.matern) )
save.image(".RData")
kc.gaussian<-krige.conv(geodataset,locations= dsgr.grid,
krige =krige.control(type.krige="OK",obj.m = lk.gaussian,
trend.l="1st" ,trend.d= "1st"))
image(kc.gaussian,xlim=range(geodataset$x),ylim=range(geodataset$y))
geodataset$x
geodataset
dataset$x
kc.gaussian<-krige.conv(geodataset,locations= dsgr.grid,
krige =krige.control(type.krige="OK",obj.m = lk.gaussian,
trend.l="1st" ,trend.d= "1st"))
image(kc.gaussian,xlim=range(dataset$x),ylim=range(dataset$y))
rnx <- range(geodataset$coords[,1]) #Minimum and aximum of the latitude
rny <- range(geodataset$coords[,2]) #Minimum and Maximum of the longitude
newx.grid <- seq(rnx[1],rnx[2],l=51) #Create a sequence from minimum to
#maximum of the latitude of 51 points
newy.grid <- seq(rny[1],rny[2],l=51) #Create a sequence from minimum to
#maximum of the longitude of 51 points
dsgr.grid <- expand.grid(newx=newx.grid, newy=newy.grid) #expand, to create a grid
points(geodataset, ylim=range(poly84$y))
lines(poly84[,1:2], type="l")
points(dsgr.grid, pch = 19, col = 4, cex = 0.25)
kc.gaussian<-krige.conv(geodataset,locations= dsgr.grid,
krige =krige.control(type.krige="OK",obj.m = lk.gaussian,
trend.l="1st" ,trend.d= "1st"))
image(kc.gaussian,xlim=range(dataset$x),ylim=range(dataset$y))
kc.gaussian<-krige.conv(geodataset,locations= dsgr.grid,
krige =krige.control(type.krige="OK",obj.m = lk.gaussian,
trend.l="1st" ,trend.d= "1st"))
image(kc.gaussian,xlim=range(dataset$x),ylim=range(dataset$y))
contour(kc.gaussian,filled= TRUE,
coords.data=geodataset$coords,col=terrain.colors(31),xlim=range(dataset$x),ylim=range(dataset$y))
contour(kc.gaussian,filled= TRUE,val=sqrt(kc.gaussian$krige.var),
coords.data=geodataset$coords,xlim=range(dataset$x),ylim=range(dataset$y),
col = gray(seq(1, 0.1, l = 30)), main="Plot of Standard Deviation")
xv.gaussian <- xvalid(geodataset, model =lk.gaussian, reestimate = F)
names(xv.gaussian)
VC1.gaussian <- abs(mean(xv.gaussian$error/sqrt(xv.gaussian$krige.var)))
VC2.gaussian <- sqrt(mean((xv.gaussian$error/sqrt(xv.gaussian$krige.var))^2))
VC3.gaussian <- sqrt(mean(xv.gaussian$error^2))
data.frame( index = c("VC1", "VC2", "VC3"), value = c(VC1.gaussian, VC2.gaussian, VC3.gaussian) )
kc.spherical<-krige.conv(geodataset,locations= dsgr.grid,
krige =krige.control(type.krige="OK",obj.m = lk.spherical,
trend.l="1st" ,trend.d= "1st"))
image(kc.spherical, xlim=range(dataset$x),ylim=range(dataset$y))
contour(kc.spherical,filled= TRUE,
coords.data=geodataset$coords,xlim=range(dataset$x),ylim=range(dataset$y),
col=terrain.colors(30))
contour(kc.spherical,filled= TRUE,val=sqrt(kc.spherical$krige.var),
coords.data=geodataset$coords,xlim=range(dataset$x),ylim=range(dataset$y),
col = gray(seq(1, 0.1, l = 30)))
xv.spherical <- xvalid(geodataset, model =lk.spherical, reestimate = F)
VC1.spherical <- abs(mean(xv.spherical$error/sqrt(xv.spherical$krige.var)))
VC2.spherical <- sqrt(mean((xv.spherical$error/sqrt(xv.spherical$krige.var))^2))
VC3.spherical <- sqrt(mean(xv.spherical$error^2))
data.frame( index = c("VC1", "VC2", "VC3"), value = c(VC1.spherical, VC2.spherical, VC3.spherical) )
kc.exponential<-krige.conv(geodataset,locations= dsgr.grid,
krige =krige.control(type.krige="OK",obj.m = lk.exponential,
trend.l="1st" ,trend.d= "1st"))
image(kc.exponential, xlim=range(dataset$x),ylim=range(dataset$y))
contour(kc.exponential,filled= TRUE,
coords.data=geodataset$coords,xlim=range(dataset$x),ylim=range(dataset$y),
col=terrain.colors(30))
contour(kc.exponential,filled= TRUE,val=sqrt(kc.exponential$krige.var),
coords.data=geodataset$coords,xlim=range(dataset$x),ylim=range(dataset$y),
col = gray(seq(1, 0.1, l = 30)))
xv.exponential <- xvalid(geodataset, model =lk.exponential, reestimate = F)
VC1.exponential <- abs(mean(xv.exponential$error/sqrt(xv.exponential$krige.var)))
VC2.exponential <- sqrt(mean((xv.exponential$error/sqrt(xv.exponential$krige.var))^2))
VC3.exponential <- sqrt(mean(xv.exponential$error^2))
data.frame( index = c("VC1", "VC2", "VC3"), value = c(VC1.exponential, VC2.exponential, VC3.exponential) )
kc.matern<-krige.conv(geodataset,locations= dsgr.grid,
krige =krige.control(type.krige="OK",obj.m = lk.matern,
trend.l="1st" ,trend.d= "1st"))
image(kc.matern, xlim=range(dataset$x),ylim=range(dataset$y))
contour(kc.matern,filled= TRUE,
coords.data=geodataset$coords,xlim=range(dataset$x),ylim=range(dataset$y),
col=terrain.colors(30))
contour(kc.matern,filled= TRUE,val=sqrt(kc.matern$krige.var),
coords.data=geodataset$coords,xlim=range(dataset$x),ylim=range(dataset$y),
col = gray(seq(1, 0.1, l = 30)))
xv.matern <- xvalid(geodataset, model =lk.matern, reestimate = F)
VC1.matern <- abs(mean(xv.matern$error/sqrt(xv.matern$krige.var)))
VC2.matern <- sqrt(mean((xv.matern$error/sqrt(xv.matern$krige.var))^2))
VC3.matern <- sqrt(mean(xv.matern$error^2))
data.frame( index = c("VC1", "VC2", "VC3"), value = c(VC1.matern, VC2.matern, VC3.matern) )
save.image(".RData")
